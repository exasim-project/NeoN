<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classNeoN_1_1Array" kind="class" language="C++" prot="public">
    <compoundname>NeoN::Array</compoundname>
    <includes refid="array_8hpp" local="no">array.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename ValueType</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classNeoN_1_1Array_1a703c735cebf9426e49cbf87af892f203" prot="public" static="no">
        <type>ValueType</type>
        <definition>using NeoN::Array&lt; ValueType &gt;::ArrayValueType =  ValueType</definition>
        <argsstring></argsstring>
        <name>ArrayValueType</name>
        <qualifiedname>NeoN::Array::ArrayValueType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="33" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoN_1_1Array_1ae9d933ada1c2033609290b4348ae0a99" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
        <definition>localIdx NeoN::Array&lt; ValueType &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <qualifiedname>NeoN::Array::size_</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Size of the field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="344" column="14" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="344" bodyend="344"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoN_1_1Array_1aa656ffeba80ca06fba1d3701320c9dee" prot="private" static="no" mutable="no">
        <type>ValueType *</type>
        <definition>ValueType* NeoN::Array&lt; ValueType &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>NeoN::Array::data_</qualifiedname>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Pointer to the field data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="345" column="15" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="345" bodyend="345"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoN_1_1Array_1abaf357527a5137d443a3ed57491796f9" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref></type>
        <definition>const Executor NeoN::Array&lt; ValueType &gt;::exec_</definition>
        <argsstring></argsstring>
        <name>exec_</name>
        <qualifiedname>NeoN::Array::exec_</qualifiedname>
        <briefdescription>
<para>Executor associated with the field. (CPU, GPU, openMP, etc.) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="346" column="20" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="346" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoN_1_1Array_1a43736b7f297035903604682cce147975" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Array&lt; ValueType &gt;::Array</definition>
        <argsstring>(const Executor &amp;exec, localIdx size)</argsstring>
        <name>Array</name>
        <qualifiedname>NeoN::Array::Array</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Create an uninitialized <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref> with a given size on an executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the field </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="40" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="40" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1abd63131ee4d72bb59e2f7e5e5ea4a092" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Array&lt; ValueType &gt;::Array</definition>
        <argsstring>(const Executor &amp;exec, const ValueType *in, localIdx size, Executor hostExec=SerialExecutor())</argsstring>
        <name>Array</name>
        <qualifiedname>NeoN::Array::Array</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const ValueType *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref></type>
          <declname>hostExec</declname>
          <defval><ref refid="classNeoN_1_1SerialExecutor" kindref="compound">SerialExecutor</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref> with a given size from existing memory on an executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to existing data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostExec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor where the original data is located </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="58" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="58" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a0da6227d6715ab3384654f6ca337ea16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Array&lt; ValueType &gt;::Array</definition>
        <argsstring>(const Executor &amp;exec, localIdx size, ValueType value)</argsstring>
        <name>Array</name>
        <qualifiedname>NeoN::Array::Array</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref> with a given size on an executor and uniform value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="83" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="83" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a986bc7e908a4195989bd4741153c042c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Array&lt; ValueType &gt;::Array</definition>
        <argsstring>(const Executor &amp;exec, std::vector&lt; ValueType &gt; in)</argsstring>
        <name>Array</name>
        <qualifiedname>NeoN::Array::Array</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::vector&lt; ValueType &gt;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref> from a given <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref> of values on an executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref> of elements to copy over </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="101" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1aacaa3114b08907787d14213acbc817a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Array&lt; ValueType &gt;::Array</definition>
        <argsstring>(const Executor &amp;exec, const Array&lt; ValueType &gt; &amp;in)</argsstring>
        <name>Array</name>
        <qualifiedname>NeoN::Array::Array</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref>&lt; ValueType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref> as a copy of a <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref> on a specified executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref> of elements to copy over </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="111" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1aad5fa896fb65849722e3b9eadb426e3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Array&lt; ValueType &gt;::Array</definition>
        <argsstring>(const Array&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>Array</name>
        <qualifiedname>NeoN::Array::Array</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor, creates a new field with the same size and data as the parsed field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to copy from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="119" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a433fd96d7564e1cc0be986860fc605cf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Array&lt; ValueType &gt;::Array</definition>
        <argsstring>(Array&lt; ValueType &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>Array</name>
        <qualifiedname>NeoN::Array::Array</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Array" kindref="compound">Array</ref>&lt; ValueType &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move constructor, moves the data from the parsed field to the new field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to move from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="126" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1aa95d39f2a20cea2dcdcf81cc2c4968a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Array&lt; ValueType &gt;::~Array</definition>
        <argsstring>()</argsstring>
        <name>~Array</name>
        <qualifiedname>NeoN::Array::~Array</qualifiedname>
        <briefdescription>
<para>Destroy the <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="135" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1aef8b781ed35a0af921248cbd451313bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename func</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::Array&lt; ValueType &gt;::apply</definition>
        <argsstring>(func f)</argsstring>
        <name>apply</name>
        <qualifiedname>NeoN::Array::apply</qualifiedname>
        <param>
          <type>func</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>applies a functor, transformation, to the field </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The functor to map over the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Ideally the f should be a KOKKOS_LAMBA </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="147" column="10" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a483343e23f928e9195d8711d7930c133" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Array" kindref="compound">Array</ref>&lt; ValueType &gt;</type>
        <definition>Array&lt; ValueType &gt; NeoN::Array&lt; ValueType &gt;::copyToExecutor</definition>
        <argsstring>(Executor dstExec) const</argsstring>
        <name>copyToExecutor</name>
        <qualifiedname>NeoN::Array::copyToExecutor</qualifiedname>
        <param>
          <type><ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref></type>
          <declname>dstExec</declname>
        </param>
        <briefdescription>
<para>Copies the data to a new field on a specific executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dstExec</parametername>
</parameternamelist>
<parameterdescription>
<para>The executor on which the data should be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the field on the host. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="157" column="12" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="157" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a2f6d531ad5afd6c76a32c6ab9d819839" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Array" kindref="compound">Array</ref>&lt; ValueType &gt;</type>
        <definition>Array&lt; ValueType &gt; NeoN::Array&lt; ValueType &gt;::copyToHost</definition>
        <argsstring>() const</argsstring>
        <name>copyToHost</name>
        <qualifiedname>NeoN::Array::copyToHost</qualifiedname>
        <briefdescription>
<para>Returns a copy of the field back to the host. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A copy of the field on the host. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="171" column="12" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a31837fdb0cf05b95234a75964dcd141a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::Array&lt; ValueType &gt;::copyToHost</definition>
        <argsstring>(Array&lt; ValueType &gt; &amp;result)</argsstring>
        <name>copyToHost</name>
        <qualifiedname>NeoN::Array::copyToHost</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Array" kindref="compound">Array</ref>&lt; ValueType &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Copies the data (from anywhere) to a parsed host field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The field into which the data must be copied. Must be sized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>exits if the size of the result field is not the same as the source field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="181" column="10" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="181" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1aa8a0ca63b7cc9231f5e07db81345f07c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>Array &amp; NeoN::Array&lt; ValueType &gt;::operator[]</definition>
        <argsstring>(const localIdx i)=delete</argsstring>
        <name>operator[]</name>
        <qualifiedname>NeoN::Array::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="190" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a61186cad32f71dd9bc9d0340c1a83c36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>const Array &amp; NeoN::Array&lt; ValueType &gt;::operator[]</definition>
        <argsstring>(const localIdx i) const =delete</argsstring>
        <name>operator[]</name>
        <qualifiedname>NeoN::Array::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="193" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a60191b4699dbc021c6411f7f8534f03e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::Array&lt; ValueType &gt;::operator=</definition>
        <argsstring>(const ValueType &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>NeoN::Array::operator=</qualifiedname>
        <param>
          <type>const ValueType &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator, Sets the field values to that of the passed value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the field to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="199" column="10" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="199" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1ac1c4a13738703fe6e514ebe51cc9d822" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::Array&lt; ValueType &gt;::operator=</definition>
        <argsstring>(const Array&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>NeoN::Array::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator, Sets the field values to that of the parsed field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to copy from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This field will be sized to the size of the parsed field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="211" column="10" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="211" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1adae762a549262c56fb922acb850d70e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::Array&lt; ValueType &gt;::resize</definition>
        <argsstring>(const localIdx size)</argsstring>
        <name>resize</name>
        <qualifiedname>NeoN::Array::resize</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Resizes the field to a new size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size to set the field to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="225" column="10" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="225" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1afc980daee8c101771b614cc63bb4cd26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ValueType *</type>
        <definition>ValueType * NeoN::Array&lt; ValueType &gt;::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <qualifiedname>NeoN::Array::data</qualifiedname>
        <briefdescription>
<para>Direct access to the underlying field data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the first cell data in the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="252" column="23" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="252" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a11ce7e13bf9bf9b132948219b0eb24fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ValueType *</type>
        <definition>const ValueType * NeoN::Array&lt; ValueType &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <qualifiedname>NeoN::Array::data</qualifiedname>
        <briefdescription>
<para>Direct access to the underlying field data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the first cell data in the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="258" column="29" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a86786f624d5d9837305ae12bb6d5eea1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
        <definition>const Executor &amp; NeoN::Array&lt; ValueType &gt;::exec</definition>
        <argsstring>() const</argsstring>
        <name>exec</name>
        <qualifiedname>NeoN::Array::exec</qualifiedname>
        <briefdescription>
<para>Gets the executor associated with the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Reference to the executor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="264" column="28" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="264" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a724b44f0930b2af455ca56c2811cb56c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
        <definition>localIdx NeoN::Array&lt; ValueType &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>NeoN::Array::size</qualifiedname>
        <briefdescription>
<para>Gets the size of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="270" column="22" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a5734c9aa61db833dd685290a46dc9277" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceNeoN_1afa6c1c30776d4f6ed4691b0f9d1ea416" kindref="member">label</ref></type>
        <definition>label NeoN::Array&lt; ValueType &gt;::ssize</definition>
        <argsstring>() const</argsstring>
        <name>ssize</name>
        <qualifiedname>NeoN::Array::ssize</qualifiedname>
        <briefdescription>
<para>Gets the size of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="276" column="19" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a7f9394128c34e9f1785eb2f2af90191a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoN::Array&lt; ValueType &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>NeoN::Array::empty</qualifiedname>
        <briefdescription>
<para>Checks if the field is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the field is empty, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="282" column="18" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="282" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a22f7000fe0f4474f3a74441b0929ebe3" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; ValueType &gt;</type>
        <definition>View&lt; ValueType &gt; NeoN::Array&lt; ValueType &gt;::view</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Array::view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="285" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a86efccbe4371606aa4ed67941bc715c2" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const ValueType &gt;</type>
        <definition>View&lt; const ValueType &gt; NeoN::Array&lt; ValueType &gt;::view</definition>
        <argsstring>() const &amp;&amp;=delete</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Array::view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="288" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1aae640dc1b6f3ba143f417bc3bfc1da51" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; ValueType &gt;</type>
        <definition>View&lt; ValueType &gt; NeoN::Array&lt; ValueType &gt;::view</definition>
        <argsstring>() &amp;</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Array::view</qualifiedname>
        <briefdescription>
<para>Gets the field as a view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoN_1_1View" kindref="compound">View</ref> of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="294" column="18" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a4c1054e4c6666d8383cc4a9b4574d6da" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const ValueType &gt;</type>
        <definition>View&lt; const ValueType &gt; NeoN::Array&lt; ValueType &gt;::view</definition>
        <argsstring>() const &amp;</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Array::view</qualifiedname>
        <briefdescription>
<para>Gets the field as a view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoN_1_1View" kindref="compound">View</ref> of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="303" column="18" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="303" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1ac1804522103d418476b150d9e359d9bc" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; ValueType &gt;</type>
        <definition>View&lt; ValueType &gt; NeoN::Array&lt; ValueType &gt;::view</definition>
        <argsstring>(std::pair&lt; localIdx, localIdx &gt; range) &amp;&amp;=delete</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Array::view</qualifiedname>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="309" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1ac1ec5e4c41b4b069c48c2c2676c2f6fe" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const ValueType &gt;</type>
        <definition>View&lt; const ValueType &gt; NeoN::Array&lt; ValueType &gt;::view</definition>
        <argsstring>(std::pair&lt; localIdx, localIdx &gt; range) const &amp;&amp;=delete</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Array::view</qualifiedname>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="312" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a3f50cf874415f03ba54286b2570b15cb" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; ValueType &gt;</type>
        <definition>View&lt; ValueType &gt; NeoN::Array&lt; ValueType &gt;::view</definition>
        <argsstring>(std::pair&lt; localIdx, localIdx &gt; range) &amp;</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Array::view</qualifiedname>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Gets a sub view of the field as a view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoN_1_1View" kindref="compound">View</ref> of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="318" column="18" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="318" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a65283be284e1cfdd0c4b2f2e42177861" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const ValueType &gt;</type>
        <definition>View&lt; const ValueType &gt; NeoN::Array&lt; ValueType &gt;::view</definition>
        <argsstring>(std::pair&lt; localIdx, localIdx &gt; range) const &amp;</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::Array::view</qualifiedname>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Gets a sub view of the field as a view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoN_1_1View" kindref="compound">View</ref> of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="329" column="18" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="329" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Array_1a4335763d7878a7e5887086d949c66b33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
        <definition>std::pair&lt; localIdx, localIdx &gt; NeoN::Array&lt; ValueType &gt;::range</definition>
        <argsstring>() const</argsstring>
        <name>range</name>
        <qualifiedname>NeoN::Array::range</qualifiedname>
        <briefdescription>
<para>Gets the range of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The range of the field {0, <ref refid="classNeoN_1_1Array_1a724b44f0930b2af455ca56c2811cb56c" kindref="member">size()</ref>}. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="340" column="23" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="340" bodyend="340"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classNeoN_1_1Array_1a4cac76fc6e4fa3e8faa7e07b0d789b20" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::Array&lt; ValueType &gt;::validateOtherArray</definition>
        <argsstring>(const Array&lt; ValueType &gt; &amp;rhs) const</argsstring>
        <name>validateOtherArray</name>
        <qualifiedname>NeoN::Array::validateOtherArray</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Array" kindref="compound">Array</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Checks if two fields are the same size and have the same executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="352" column="10" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="352" bodyend="356"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A class to contain the data and executors for a field and define some basic operations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" line="28" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/array.hpp" bodystart="29" bodyend="357"/>
    <listofallmembers>
      <member refid="classNeoN_1_1Array_1aef8b781ed35a0af921248cbd451313bf" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>apply</name></member>
      <member refid="classNeoN_1_1Array_1a43736b7f297035903604682cce147975" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>Array</name></member>
      <member refid="classNeoN_1_1Array_1abd63131ee4d72bb59e2f7e5e5ea4a092" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>Array</name></member>
      <member refid="classNeoN_1_1Array_1a0da6227d6715ab3384654f6ca337ea16" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>Array</name></member>
      <member refid="classNeoN_1_1Array_1a986bc7e908a4195989bd4741153c042c" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>Array</name></member>
      <member refid="classNeoN_1_1Array_1aacaa3114b08907787d14213acbc817a9" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>Array</name></member>
      <member refid="classNeoN_1_1Array_1aad5fa896fb65849722e3b9eadb426e3f" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>Array</name></member>
      <member refid="classNeoN_1_1Array_1a433fd96d7564e1cc0be986860fc605cf" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>Array</name></member>
      <member refid="classNeoN_1_1Array_1a703c735cebf9426e49cbf87af892f203" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>ArrayValueType</name></member>
      <member refid="classNeoN_1_1Array_1a483343e23f928e9195d8711d7930c133" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>copyToExecutor</name></member>
      <member refid="classNeoN_1_1Array_1a2f6d531ad5afd6c76a32c6ab9d819839" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>copyToHost</name></member>
      <member refid="classNeoN_1_1Array_1a31837fdb0cf05b95234a75964dcd141a" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>copyToHost</name></member>
      <member refid="classNeoN_1_1Array_1afc980daee8c101771b614cc63bb4cd26" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>data</name></member>
      <member refid="classNeoN_1_1Array_1a11ce7e13bf9bf9b132948219b0eb24fa" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>data</name></member>
      <member refid="classNeoN_1_1Array_1aa656ffeba80ca06fba1d3701320c9dee" prot="private" virt="non-virtual"><scope>NeoN::Array</scope><name>data_</name></member>
      <member refid="classNeoN_1_1Array_1a7f9394128c34e9f1785eb2f2af90191a" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>empty</name></member>
      <member refid="classNeoN_1_1Array_1a86786f624d5d9837305ae12bb6d5eea1" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>exec</name></member>
      <member refid="classNeoN_1_1Array_1abaf357527a5137d443a3ed57491796f9" prot="private" virt="non-virtual"><scope>NeoN::Array</scope><name>exec_</name></member>
      <member refid="classNeoN_1_1Array_1a60191b4699dbc021c6411f7f8534f03e" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>operator=</name></member>
      <member refid="classNeoN_1_1Array_1ac1c4a13738703fe6e514ebe51cc9d822" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>operator=</name></member>
      <member refid="classNeoN_1_1Array_1aa8a0ca63b7cc9231f5e07db81345f07c" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>operator[]</name></member>
      <member refid="classNeoN_1_1Array_1a61186cad32f71dd9bc9d0340c1a83c36" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>operator[]</name></member>
      <member refid="classNeoN_1_1Array_1a4335763d7878a7e5887086d949c66b33" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>range</name></member>
      <member refid="classNeoN_1_1Array_1adae762a549262c56fb922acb850d70e3" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>resize</name></member>
      <member refid="classNeoN_1_1Array_1a724b44f0930b2af455ca56c2811cb56c" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>size</name></member>
      <member refid="classNeoN_1_1Array_1ae9d933ada1c2033609290b4348ae0a99" prot="private" virt="non-virtual"><scope>NeoN::Array</scope><name>size_</name></member>
      <member refid="classNeoN_1_1Array_1a5734c9aa61db833dd685290a46dc9277" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>ssize</name></member>
      <member refid="classNeoN_1_1Array_1a4cac76fc6e4fa3e8faa7e07b0d789b20" prot="private" virt="non-virtual"><scope>NeoN::Array</scope><name>validateOtherArray</name></member>
      <member refid="classNeoN_1_1Array_1a22f7000fe0f4474f3a74441b0929ebe3" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>view</name></member>
      <member refid="classNeoN_1_1Array_1a86efccbe4371606aa4ed67941bc715c2" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>view</name></member>
      <member refid="classNeoN_1_1Array_1aae640dc1b6f3ba143f417bc3bfc1da51" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>view</name></member>
      <member refid="classNeoN_1_1Array_1a4c1054e4c6666d8383cc4a9b4574d6da" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>view</name></member>
      <member refid="classNeoN_1_1Array_1ac1804522103d418476b150d9e359d9bc" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>view</name></member>
      <member refid="classNeoN_1_1Array_1ac1ec5e4c41b4b069c48c2c2676c2f6fe" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>view</name></member>
      <member refid="classNeoN_1_1Array_1a3f50cf874415f03ba54286b2570b15cb" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>view</name></member>
      <member refid="classNeoN_1_1Array_1a65283be284e1cfdd0c4b2f2e42177861" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>view</name></member>
      <member refid="classNeoN_1_1Array_1aa95d39f2a20cea2dcdcf81cc2c4968a4" prot="public" virt="non-virtual"><scope>NeoN::Array</scope><name>~Array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
