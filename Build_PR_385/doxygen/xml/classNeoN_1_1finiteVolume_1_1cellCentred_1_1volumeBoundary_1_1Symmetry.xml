<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry" kind="class" language="C++" prot="public">
    <compoundname>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry</compoundname>
    <basecompoundref prot="public" virt="non-virtual">VolumeBoundaryFactory&lt; ValueType &gt;::template Register</basecompoundref>
    <includes refid="volume_2symmetry_8hpp" local="no">symmetry.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename ValueType</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1aaff7af8b9ea8509ac4665bb0a43b9dbb" prot="private" static="no">
        <type>typename <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeBoundaryFactory" kindref="compound">VolumeBoundaryFactory</ref>&lt; ValueType &gt;::template <ref refid="classRuntimeSelectionFactory_1_1Register" kindref="compound">Register</ref>&lt; <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry" kindref="compound">Symmetry</ref>&lt; ValueType &gt; &gt;</type>
        <definition>using NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry&lt; ValueType &gt;::Base =  typename VolumeBoundaryFactory&lt;ValueType&gt;::template Register&lt;Symmetry&lt;ValueType&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry::Base</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" line="109" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1ad127393f5c6fc53bc41e3148c2b63bc9" prot="public" static="no">
        <type><ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry" kindref="compound">Symmetry</ref>&lt; ValueType &gt;</type>
        <definition>using NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry&lt; ValueType &gt;::SymmetryType =  Symmetry&lt;ValueType&gt;</definition>
        <argsstring></argsstring>
        <name>SymmetryType</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry::SymmetryType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" line="113" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1a15af757df88046967db179f0519aa85e" prot="private" static="no" mutable="no">
        <type>const <ref refid="classNeoN_1_1UnstructuredMesh" kindref="compound">UnstructuredMesh</ref> &amp;</type>
        <definition>const UnstructuredMesh&amp; NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry&lt; ValueType &gt;::mesh_</definition>
        <argsstring></argsstring>
        <name>mesh_</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry::mesh_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" line="140" column="28" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1adfce573f01f3a4a8163e001e19dac680" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry&lt; ValueType &gt;::Symmetry</definition>
        <argsstring>(const UnstructuredMesh &amp;mesh, const Dictionary &amp;dict, localIdx patchID)</argsstring>
        <name>Symmetry</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry::Symmetry</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1UnstructuredMesh" kindref="compound">UnstructuredMesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
          <declname>patchID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" line="115" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1a12ac59999ceb5b0aeade1c6c260f99f4" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry&lt; ValueType &gt;::correctBoundaryCondition</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;domainVector) final</argsstring>
        <name>correctBoundaryCondition</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry::correctBoundaryCondition</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>domainVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" line="119" column="18" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1ab3c69e68ac6e8692e5fccb413feb17f5" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1VolumeBoundaryFactory" kindref="compound">VolumeBoundaryFactory</ref>&lt; ValueType &gt; &gt;</type>
        <definition>virtual std::unique_ptr&lt; VolumeBoundaryFactory&lt; ValueType &gt; &gt; NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry&lt; ValueType &gt;::clone</definition>
        <argsstring>() const final</argsstring>
        <name>clone</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry::clone</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" line="133" column="29" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" bodystart="133" bodyend="136"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1a582a29eb29a4b5b8cb11b6d49e0fc227" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry&lt; ValueType &gt;::name</definition>
        <argsstring>()</argsstring>
        <name>name</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry::name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" line="124" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1a696ac255b6593c2c7ad3d5c199fa8e94" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry&lt; ValueType &gt;::doc</definition>
        <argsstring>()</argsstring>
        <name>doc</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry::doc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" line="126" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1afc4ba60168f3004b7b12fb5e3a714f5f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry&lt; ValueType &gt;::schema</definition>
        <argsstring>()</argsstring>
        <name>schema</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry::schema</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" line="131" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" bodystart="131" bodyend="131"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry&lt; ValueType &gt;</label>
        <link refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>VolumeBoundaryFactory::template Register&lt; Symmetry&lt; ValueType &gt; &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry&lt; ValueType &gt;</label>
        <link refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>VolumeBoundaryFactory::template Register&lt; Symmetry&lt; ValueType &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" line="107" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/volume/symmetry.hpp" bodystart="108" bodyend="141"/>
    <listofallmembers>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1aaff7af8b9ea8509ac4665bb0a43b9dbb" prot="private" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry</scope><name>Base</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1ab3c69e68ac6e8692e5fccb413feb17f5" prot="public" virt="virtual"><scope>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry</scope><name>clone</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1a12ac59999ceb5b0aeade1c6c260f99f4" prot="public" virt="virtual"><scope>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry</scope><name>correctBoundaryCondition</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1a696ac255b6593c2c7ad3d5c199fa8e94" prot="public" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry</scope><name>doc</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1a15af757df88046967db179f0519aa85e" prot="private" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry</scope><name>mesh_</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1a582a29eb29a4b5b8cb11b6d49e0fc227" prot="public" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry</scope><name>name</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1afc4ba60168f3004b7b12fb5e3a714f5f" prot="public" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry</scope><name>schema</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1adfce573f01f3a4a8163e001e19dac680" prot="public" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry</scope><name>Symmetry</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1volumeBoundary_1_1Symmetry_1ad127393f5c6fc53bc41e3148c2b63bc9" prot="public" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::volumeBoundary::Symmetry</scope><name>SymmetryType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
