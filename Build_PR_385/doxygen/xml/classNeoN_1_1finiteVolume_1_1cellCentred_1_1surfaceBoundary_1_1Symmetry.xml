<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry" kind="class" language="C++" prot="public">
    <compoundname>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry</compoundname>
    <basecompoundref prot="public" virt="non-virtual">SurfaceBoundaryFactory&lt; ValueType &gt;::template Register</basecompoundref>
    <includes refid="surface_2symmetry_8hpp" local="no">symmetry.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename ValueType</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1a9a84ed8d047a45f037a922d25d67bc05" prot="private" static="no">
        <type>typename <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceBoundaryFactory" kindref="compound">SurfaceBoundaryFactory</ref>&lt; ValueType &gt;::template <ref refid="classRuntimeSelectionFactory_1_1Register" kindref="compound">Register</ref>&lt; <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry" kindref="compound">Symmetry</ref>&lt; ValueType &gt; &gt;</type>
        <definition>using NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry&lt; ValueType &gt;::Base =  typename SurfaceBoundaryFactory&lt;ValueType&gt;::template Register&lt;Symmetry&lt;ValueType&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry::Base</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" line="78" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1a588441615a7e13a45af96deaf0efb8b9" prot="private" static="no" mutable="no">
        <type>const <ref refid="classNeoN_1_1UnstructuredMesh" kindref="compound">UnstructuredMesh</ref> &amp;</type>
        <definition>const UnstructuredMesh&amp; NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry&lt; ValueType &gt;::mesh_</definition>
        <argsstring></argsstring>
        <name>mesh_</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry::mesh_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" line="105" column="28" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1a39369cc93ba301dd52dd39b9d3f3f0af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry&lt; ValueType &gt;::Symmetry</definition>
        <argsstring>(const UnstructuredMesh &amp;mesh, const Dictionary &amp;dict, localIdx patchID)</argsstring>
        <name>Symmetry</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry::Symmetry</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1UnstructuredMesh" kindref="compound">UnstructuredMesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
          <declname>patchID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" line="82" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1ae8631a56d17330b0ca49805fd7dc0539" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry&lt; ValueType &gt;::correctBoundaryCondition</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;domainVector) override</argsstring>
        <name>correctBoundaryCondition</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry::correctBoundaryCondition</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>domainVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" line="86" column="10" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1a6cb2e6ea3a1553600c66a68c37756ce3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1SurfaceBoundaryFactory" kindref="compound">SurfaceBoundaryFactory</ref>&lt; ValueType &gt; &gt;</type>
        <definition>std::unique_ptr&lt; SurfaceBoundaryFactory&lt; ValueType &gt; &gt; NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry&lt; ValueType &gt;::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry::clone</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" line="98" column="21" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1ae74e15e1de794d5dfbd360542bcb1e1a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry&lt; ValueType &gt;::name</definition>
        <argsstring>()</argsstring>
        <name>name</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry::name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" line="91" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1afbf0be1338f93b06afb0abe65c04d05a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry&lt; ValueType &gt;::doc</definition>
        <argsstring>()</argsstring>
        <name>doc</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry::doc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" line="92" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1a55676f9d9a3fe721ea3bb10c0241b5b7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry&lt; ValueType &gt;::schema</definition>
        <argsstring>()</argsstring>
        <name>schema</name>
        <qualifiedname>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry::schema</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" line="96" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry&lt; ValueType &gt;</label>
        <link refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SurfaceBoundaryFactory::template Register&lt; Symmetry&lt; ValueType &gt; &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry&lt; ValueType &gt;</label>
        <link refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SurfaceBoundaryFactory::template Register&lt; Symmetry&lt; ValueType &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" line="76" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/finiteVolume/cellCentred/boundary/surface/symmetry.hpp" bodystart="77" bodyend="106"/>
    <listofallmembers>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1a9a84ed8d047a45f037a922d25d67bc05" prot="private" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry</scope><name>Base</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1a6cb2e6ea3a1553600c66a68c37756ce3" prot="public" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry</scope><name>clone</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1ae8631a56d17330b0ca49805fd7dc0539" prot="public" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry</scope><name>correctBoundaryCondition</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1afbf0be1338f93b06afb0abe65c04d05a" prot="public" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry</scope><name>doc</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1a588441615a7e13a45af96deaf0efb8b9" prot="private" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry</scope><name>mesh_</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1ae74e15e1de794d5dfbd360542bcb1e1a" prot="public" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry</scope><name>name</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1a55676f9d9a3fe721ea3bb10c0241b5b7" prot="public" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry</scope><name>schema</name></member>
      <member refid="classNeoN_1_1finiteVolume_1_1cellCentred_1_1surfaceBoundary_1_1Symmetry_1a39369cc93ba301dd52dd39b9d3f3f0af" prot="public" virt="non-virtual"><scope>NeoN::finiteVolume::cellCentred::surfaceBoundary::Symmetry</scope><name>Symmetry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
