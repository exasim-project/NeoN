<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classNeoN_1_1TokenList" kind="class" language="C++" prot="public">
    <compoundname>NeoN::TokenList</compoundname>
    <includes refid="tokenList_8hpp" local="no">tokenList.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoN_1_1TokenList_1a716d3afc4634ad4e7145b60ef0f3e792" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::any &gt;</type>
        <definition>std::vector&lt;std::any&gt; NeoN::TokenList::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>NeoN::TokenList::data_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="180" column="17" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoN_1_1TokenList_1ab11e79a1cb09e2108f6ebdd98dd4679c" prot="private" static="no" mutable="yes">
        <type><ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
        <definition>size_t NeoN::TokenList::nextIndex_</definition>
        <argsstring></argsstring>
        <name>nextIndex_</name>
        <qualifiedname>NeoN::TokenList::nextIndex_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="181" column="20" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" bodystart="181" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoN_1_1TokenList_1a8182d8f5284751acc63601d034cf878f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoN::TokenList::TokenList</definition>
        <argsstring>()</argsstring>
        <name>TokenList</name>
        <qualifiedname>NeoN::TokenList::TokenList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="30" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1aacecba4d4ad598f8200a54b2b5902388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoN::TokenList::TokenList</definition>
        <argsstring>(const TokenList &amp;)</argsstring>
        <name>TokenList</name>
        <qualifiedname>NeoN::TokenList::TokenList</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1TokenList" kindref="compound">TokenList</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="32" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1af1e8537d6a6b6513de5847ca41c2633a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoN::TokenList::TokenList</definition>
        <argsstring>(const std::vector&lt; std::any &gt; &amp;data, size_t nextIndex=0)</argsstring>
        <name>TokenList</name>
        <qualifiedname>NeoN::TokenList::TokenList</qualifiedname>
        <param>
          <type>const std::vector&lt; std::any &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
          <declname>nextIndex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classNeoN_1_1TokenList" kindref="compound">TokenList</ref> object from a vector of std::any. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of std::any. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="38" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1aafc9278edc9dcc6db3400d69ca8a79ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoN::TokenList::TokenList</definition>
        <argsstring>(const std::initializer_list&lt; std::any &gt; &amp;initList)</argsstring>
        <name>TokenList</name>
        <qualifiedname>NeoN::TokenList::TokenList</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; std::any &gt; &amp;</type>
          <declname>initList</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classNeoN_1_1TokenList" kindref="compound">TokenList</ref> object from an initializer list of std::any. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initList</parametername>
</parameternamelist>
<parameterdescription>
<para>An initializer list of std::any. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="44" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1a7c544efc78031acfcdd8a6bec2710bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::TokenList::insert</definition>
        <argsstring>(const std::any &amp;value)</argsstring>
        <name>insert</name>
        <qualifiedname>NeoN::TokenList::insert</qualifiedname>
        <param>
          <type>const std::any &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Inserts a value into the token list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="50" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1ab18b639ac9728b182802418daf6e731c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::TokenList::remove</definition>
        <argsstring>(size_t index)</argsstring>
        <name>remove</name>
        <qualifiedname>NeoN::TokenList::remove</qualifiedname>
        <param>
          <type><ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Removes a value from the token list based on the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the value to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="56" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1a0b2e988afbe75233622a6c998c9e7ae9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoN::TokenList::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>NeoN::TokenList::empty</qualifiedname>
        <briefdescription>
<para>Checks if the token list is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the token list is empty, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="62" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1a3a154481207aea8d59bb67f5668a7a47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReturnType</type>
          </param>
        </templateparamlist>
        <type>ReturnType</type>
        <definition>ReturnType NeoN::TokenList::popFront</definition>
        <argsstring>()</argsstring>
        <name>popFront</name>
        <qualifiedname>NeoN::TokenList::popFront</qualifiedname>
        <briefdescription>
<para>Removes first entry of <ref refid="classNeoN_1_1TokenList" kindref="compound">TokenList</ref> and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to cast the value to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The first value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="71" column="16" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" bodystart="71" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1a0d4febf5e08758a5bc181e66226b7e14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
        <definition>size_t NeoN::TokenList::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>NeoN::TokenList::size</qualifiedname>
        <briefdescription>
<para>Retrieves the size of the token list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the token list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="82" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1a3aaccdfa99b1390e7feba098408a7eb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReturnType</type>
          </param>
        </templateparamlist>
        <type>ReturnType &amp;</type>
        <definition>ReturnType &amp; NeoN::TokenList::get</definition>
        <argsstring>(const size_t &amp;idx)</argsstring>
        <name>get</name>
        <qualifiedname>NeoN::TokenList::get</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref> &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Retrieves the value associated with the given index, casting it to the specified type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to cast the value to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to retrieve the value for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the value associated with the index, casted to type T. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="93" column="17" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" bodystart="93" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1a904185b715739ed4b1c9e28134fab94f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReturnType</type>
          </param>
        </templateparamlist>
        <type>ReturnType &amp;</type>
        <definition>ReturnType &amp; NeoN::TokenList::next</definition>
        <argsstring>()</argsstring>
        <name>next</name>
        <qualifiedname>NeoN::TokenList::next</qualifiedname>
        <briefdescription>
<para>Retrieves the value associated with the nextIndex, casting it to the specified type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to cast the value to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the value associated with the index, casted to type T. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="119" column="16" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" bodystart="119" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1a673b7e1c3b79ecd2889a69f05e32e677" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReturnType</type>
          </param>
        </templateparamlist>
        <type>const ReturnType &amp;</type>
        <definition>const ReturnType &amp; NeoN::TokenList::get</definition>
        <argsstring>(const size_t &amp;idx) const</argsstring>
        <name>get</name>
        <qualifiedname>NeoN::TokenList::get</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref> &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Retrieves the value associated with the given index, casting it to the specified type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to cast the value to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to retrieve the value for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A const reference to the value associated with the index, casted to type T. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="135" column="23" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" bodystart="135" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1ab8719773710f0ea044a0949c034a70b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReturnType</type>
          </param>
        </templateparamlist>
        <type>const ReturnType &amp;</type>
        <definition>const ReturnType &amp; NeoN::TokenList::next</definition>
        <argsstring>() const</argsstring>
        <name>next</name>
        <qualifiedname>NeoN::TokenList::next</qualifiedname>
        <briefdescription>
<para>Retrieves the value associated with the nextIndex, casting it to the specified type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to cast the value to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A const reference to the value associated with the index, casted to type T. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="161" column="22" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" bodystart="161" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1a69172da9b405bbb67b0bf6ca0f41cc75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::any &amp;</type>
        <definition>std::any &amp; NeoN::TokenList::operator[]</definition>
        <argsstring>(const size_t &amp;idx)</argsstring>
        <name>operator[]</name>
        <qualifiedname>NeoN::TokenList::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref> &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Retrieves the value associated with the given index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to retrieve the value for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the value associated with the index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="173" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1TokenList_1a425275584ae4a65106260e1f1d7057b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::any &gt; &amp;</type>
        <definition>std::vector&lt; std::any &gt; &amp; NeoN::TokenList::tokens</definition>
        <argsstring>()</argsstring>
        <name>tokens</name>
        <qualifiedname>NeoN::TokenList::tokens</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="175" column="18"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A class representing a list of tokens. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classNeoN_1_1TokenList" kindref="compound">TokenList</ref> class provides functionality to store and manipulate a list of tokens. It supports insertion, removal, and retrieval of tokens of any type using std::any. </para>
    </detaileddescription>
    <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="26" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" bodystart="27" bodyend="182"/>
    <listofallmembers>
      <member refid="classNeoN_1_1TokenList_1a716d3afc4634ad4e7145b60ef0f3e792" prot="private" virt="non-virtual"><scope>NeoN::TokenList</scope><name>data_</name></member>
      <member refid="classNeoN_1_1TokenList_1a0b2e988afbe75233622a6c998c9e7ae9" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>empty</name></member>
      <member refid="classNeoN_1_1TokenList_1a3aaccdfa99b1390e7feba098408a7eb2" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>get</name></member>
      <member refid="classNeoN_1_1TokenList_1a673b7e1c3b79ecd2889a69f05e32e677" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>get</name></member>
      <member refid="classNeoN_1_1TokenList_1a7c544efc78031acfcdd8a6bec2710bb7" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>insert</name></member>
      <member refid="classNeoN_1_1TokenList_1a904185b715739ed4b1c9e28134fab94f" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>next</name></member>
      <member refid="classNeoN_1_1TokenList_1ab8719773710f0ea044a0949c034a70b6" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>next</name></member>
      <member refid="classNeoN_1_1TokenList_1ab11e79a1cb09e2108f6ebdd98dd4679c" prot="private" virt="non-virtual"><scope>NeoN::TokenList</scope><name>nextIndex_</name></member>
      <member refid="classNeoN_1_1TokenList_1a69172da9b405bbb67b0bf6ca0f41cc75" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>operator[]</name></member>
      <member refid="classNeoN_1_1TokenList_1a3a154481207aea8d59bb67f5668a7a47" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>popFront</name></member>
      <member refid="classNeoN_1_1TokenList_1ab18b639ac9728b182802418daf6e731c" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>remove</name></member>
      <member refid="classNeoN_1_1TokenList_1a0d4febf5e08758a5bc181e66226b7e14" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>size</name></member>
      <member refid="classNeoN_1_1TokenList_1a8182d8f5284751acc63601d034cf878f" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>TokenList</name></member>
      <member refid="classNeoN_1_1TokenList_1aacecba4d4ad598f8200a54b2b5902388" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>TokenList</name></member>
      <member refid="classNeoN_1_1TokenList_1af1e8537d6a6b6513de5847ca41c2633a" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>TokenList</name></member>
      <member refid="classNeoN_1_1TokenList_1aafc9278edc9dcc6db3400d69ca8a79ed" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>TokenList</name></member>
      <member refid="classNeoN_1_1TokenList_1a425275584ae4a65106260e1f1d7057b1" prot="public" virt="non-virtual"><scope>NeoN::TokenList</scope><name>tokens</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
