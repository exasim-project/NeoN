<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classNeoN_1_1la_1_1CSRMatrix" kind="class" language="C++" prot="public">
    <compoundname>NeoN::la::CSRMatrix</compoundname>
    <includes refid="CSRMatrix_8hpp" local="no">CSRMatrix.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename ValueType</type>
      </param>
      <param>
        <type>typename IndexType</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoN_1_1la_1_1CSRMatrix_1a1f667a1de32a5c85c123e604e32741c3" prot="private" static="no" mutable="no">
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt;</type>
        <definition>Vector&lt;ValueType&gt; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::values_</definition>
        <argsstring></argsstring>
        <name>values_</name>
        <qualifiedname>NeoN::la::CSRMatrix::values_</qualifiedname>
        <briefdescription>
<para>The (non-zero) values of the CSR matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="216" column="12" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoN_1_1la_1_1CSRMatrix_1aeec6d7e0db317a348955f6c4992baeb7" prot="private" static="no" mutable="no">
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; IndexType &gt;</type>
        <definition>Vector&lt;IndexType&gt; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::colIdxs_</definition>
        <argsstring></argsstring>
        <name>colIdxs_</name>
        <qualifiedname>NeoN::la::CSRMatrix::colIdxs_</qualifiedname>
        <briefdescription>
<para>The column indices of the CSR matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="217" column="12" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoN_1_1la_1_1CSRMatrix_1aec448d219b8e41422eeddd425916c753" prot="private" static="no" mutable="no">
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; IndexType &gt;</type>
        <definition>Vector&lt;IndexType&gt; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::rowOffs_</definition>
        <argsstring></argsstring>
        <name>rowOffs_</name>
        <qualifiedname>NeoN::la::CSRMatrix::rowOffs_</qualifiedname>
        <briefdescription>
<para>The row offsets for the CSR matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="218" column="12" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1aacaf65f8819ee497642d9359a94ed618" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::CSRMatrix</definition>
        <argsstring>(const Vector&lt; ValueType &gt; &amp;values, const Vector&lt; IndexType &gt; &amp;colIdxs, const Vector&lt; IndexType &gt; &amp;rowOffs)</argsstring>
        <name>CSRMatrix</name>
        <qualifiedname>NeoN::la::CSRMatrix::CSRMatrix</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; IndexType &gt; &amp;</type>
          <declname>colIdxs</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; IndexType &gt; &amp;</type>
          <declname>rowOffs</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="classNeoN_1_1la_1_1CSRMatrix" kindref="compound">CSRMatrix</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>The non-zero values of the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colIdxs</parametername>
</parameternamelist>
<parameterdescription>
<para>The column indices for each non-zero value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowOffs</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index in values/colIdxs for each row. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="94" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="94" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1a9772de5e5073176acfa70896964af84b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::CSRMatrix</definition>
        <argsstring>(const Executor exec)</argsstring>
        <name>CSRMatrix</name>
        <qualifiedname>NeoN::la::CSRMatrix::CSRMatrix</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref></type>
          <declname>exec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="105" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1afd83705fad7e5f93ebfcc7103d52222b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::~CSRMatrix</definition>
        <argsstring>()=default</argsstring>
        <name>~CSRMatrix</name>
        <qualifiedname>NeoN::la::CSRMatrix::~CSRMatrix</qualifiedname>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="110" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1a5963e5160ed6e2dc1e032ca55e7a1fd2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
        <definition>const Executor &amp; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::exec</definition>
        <argsstring>() const</argsstring>
        <name>exec</name>
        <qualifiedname>NeoN::la::CSRMatrix::exec</qualifiedname>
        <briefdescription>
<para>Get the executor associated with this matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Reference to the executor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="116" column="21" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1a704a9ddc7be0401fc304137facef2135" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IndexType</type>
        <definition>IndexType NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::nRows</definition>
        <argsstring>() const</argsstring>
        <name>nRows</name>
        <qualifiedname>NeoN::la::CSRMatrix::nRows</qualifiedname>
        <briefdescription>
<para>Get the number of rows in the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of rows. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="122" column="16" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="122" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1a2cdecd7ad4f5ca4d876122f7716b4db2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IndexType</type>
        <definition>IndexType NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::nNonZeros</definition>
        <argsstring>() const</argsstring>
        <name>nNonZeros</name>
        <qualifiedname>NeoN::la::CSRMatrix::nNonZeros</qualifiedname>
        <briefdescription>
<para>Get the number of non-zero values in the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of non-zero values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="132" column="16" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1a85db9eda92d62581a034a716afd6bd78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Vector&lt; ValueType &gt; &amp; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::values</definition>
        <argsstring>()</argsstring>
        <name>values</name>
        <qualifiedname>NeoN::la::CSRMatrix::values</qualifiedname>
        <briefdescription>
<para>Get a reference to values vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref> containing the matrix values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="138" column="13" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1a419a3f1700a690b2545f0c5aecdaf653" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; IndexType &gt; &amp;</type>
        <definition>Vector&lt; IndexType &gt; &amp; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::colIdxs</definition>
        <argsstring>()</argsstring>
        <name>colIdxs</name>
        <qualifiedname>NeoN::la::CSRMatrix::colIdxs</qualifiedname>
        <briefdescription>
<para>Get a reference to column indices vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref> containing the column indices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="144" column="13" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1af484f148414f4bb3edc3bb4fda4575d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; IndexType &gt; &amp;</type>
        <definition>Vector&lt; IndexType &gt; &amp; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::rowOffs</definition>
        <argsstring>()</argsstring>
        <name>rowOffs</name>
        <qualifiedname>NeoN::la::CSRMatrix::rowOffs</qualifiedname>
        <briefdescription>
<para>Get a reference to row offset vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Vi containing the row pointers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="150" column="13" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1a37dc0ca5898502e30bffb3b69ca75a9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
        <definition>const Vector&lt; ValueType &gt; &amp; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::values</definition>
        <argsstring>() const</argsstring>
        <name>values</name>
        <qualifiedname>NeoN::la::CSRMatrix::values</qualifiedname>
        <briefdescription>
<para>Get a const reference to values vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Const vector containing the matrix values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="156" column="19" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1a6ddef904b6b19b74d1f796a06e057131" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; IndexType &gt; &amp;</type>
        <definition>const Vector&lt; IndexType &gt; &amp; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::colIdxs</definition>
        <argsstring>() const</argsstring>
        <name>colIdxs</name>
        <qualifiedname>NeoN::la::CSRMatrix::colIdxs</qualifiedname>
        <briefdescription>
<para>Get a const reference to column indices vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Const vector containing the column indices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="162" column="19" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1a962e52108c2184154c66a06bbf44d27a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; IndexType &gt; &amp;</type>
        <definition>const Vector&lt; IndexType &gt; &amp; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::rowOffs</definition>
        <argsstring>() const</argsstring>
        <name>rowOffs</name>
        <qualifiedname>NeoN::la::CSRMatrix::rowOffs</qualifiedname>
        <briefdescription>
<para>Get a const reference to row offset vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Const vector containing the row pointers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="168" column="19" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1af1509d705d3c8e261ad36f4ce9fbb5ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1la_1_1CSRMatrix" kindref="compound">CSRMatrix</ref>&lt; ValueType, IndexType &gt;</type>
        <definition>CSRMatrix&lt; ValueType, IndexType &gt; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::copyToExecutor</definition>
        <argsstring>(Executor dstExec) const</argsstring>
        <name>copyToExecutor</name>
        <qualifiedname>NeoN::la::CSRMatrix::copyToExecutor</qualifiedname>
        <param>
          <type><ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref></type>
          <declname>dstExec</declname>
        </param>
        <briefdescription>
<para>Copy the matrix to another executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dstExec</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination executor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the matrix on the destination executor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="175" column="16" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="175" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1a951a3e8899f686f3f0cdb5769d9abb78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1la_1_1CSRMatrix" kindref="compound">CSRMatrix</ref>&lt; ValueType, IndexType &gt;</type>
        <definition>CSRMatrix&lt; ValueType, IndexType &gt; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::copyToHost</definition>
        <argsstring>() const</argsstring>
        <name>copyToHost</name>
        <qualifiedname>NeoN::la::CSRMatrix::copyToHost</qualifiedname>
        <briefdescription>
<para>Copy the matrix to the host. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A copy of the matrix on the host. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="191" column="16" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1af21bff84292853f1e860cb5f98fb1984" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structNeoN_1_1la_1_1CSRMatrixView" kindref="compound">CSRMatrixView</ref>&lt; ValueType, IndexType &gt;</type>
        <definition>CSRMatrixView&lt; ValueType, IndexType &gt; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::view</definition>
        <argsstring>()</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::la::CSRMatrix::view</qualifiedname>
        <briefdescription>
<para>Get a view representation of the matrix&apos;s data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structNeoN_1_1la_1_1CSRMatrixView" kindref="compound">CSRMatrixView</ref> for easy access to matrix elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="200" column="20" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1la_1_1CSRMatrix_1a664ee60d2662445f2bb91f7267c5e36d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structNeoN_1_1la_1_1CSRMatrixView" kindref="compound">CSRMatrixView</ref>&lt; const ValueType, const IndexType &gt;</type>
        <definition>const CSRMatrixView&lt; const ValueType, const IndexType &gt; NeoN::la::CSRMatrix&lt; ValueType, IndexType &gt;::view</definition>
        <argsstring>() const</argsstring>
        <name>view</name>
        <qualifiedname>NeoN::la::CSRMatrix::view</qualifiedname>
        <briefdescription>
<para>Get a const view representation of the matrix&apos;s data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Const <ref refid="structNeoN_1_1la_1_1CSRMatrixView" kindref="compound">CSRMatrixView</ref> for read-only access to matrix elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="209" column="26" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="209" bodyend="212"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Sparse matrix class with compact storage by row (CSR) format. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>The value type of the non-zero entries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndexType</parametername>
</parameternamelist>
<parameterdescription>
<para>The index type of the rows and columns. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" line="83" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/linearAlgebra/CSRMatrix.hpp" bodystart="84" bodyend="219"/>
    <listofallmembers>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1a419a3f1700a690b2545f0c5aecdaf653" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>colIdxs</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1a6ddef904b6b19b74d1f796a06e057131" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>colIdxs</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1aeec6d7e0db317a348955f6c4992baeb7" prot="private" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>colIdxs_</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1af1509d705d3c8e261ad36f4ce9fbb5ab" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>copyToExecutor</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1a951a3e8899f686f3f0cdb5769d9abb78" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>copyToHost</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1aacaf65f8819ee497642d9359a94ed618" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>CSRMatrix</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1a9772de5e5073176acfa70896964af84b" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>CSRMatrix</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1a5963e5160ed6e2dc1e032ca55e7a1fd2" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>exec</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1a2cdecd7ad4f5ca4d876122f7716b4db2" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>nNonZeros</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1a704a9ddc7be0401fc304137facef2135" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>nRows</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1af484f148414f4bb3edc3bb4fda4575d6" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>rowOffs</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1a962e52108c2184154c66a06bbf44d27a" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>rowOffs</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1aec448d219b8e41422eeddd425916c753" prot="private" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>rowOffs_</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1a85db9eda92d62581a034a716afd6bd78" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>values</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1a37dc0ca5898502e30bffb3b69ca75a9b" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>values</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1a1f667a1de32a5c85c123e604e32741c3" prot="private" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>values_</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1af21bff84292853f1e860cb5f98fb1984" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>view</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1a664ee60d2662445f2bb91f7267c5e36d" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>view</name></member>
      <member refid="classNeoN_1_1la_1_1CSRMatrix_1afd83705fad7e5f93ebfcc7103d52222b" prot="public" virt="non-virtual"><scope>NeoN::la::CSRMatrix</scope><name>~CSRMatrix</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
