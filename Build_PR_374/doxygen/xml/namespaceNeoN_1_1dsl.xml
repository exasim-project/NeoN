<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceNeoN_1_1dsl" kind="namespace" language="C++">
    <compoundname>NeoN::dsl</compoundname>
    <innerclass refid="classNeoN_1_1dsl_1_1Coeff" prot="public">NeoN::dsl::Coeff</innerclass>
    <innerclass refid="classNeoN_1_1dsl_1_1Expression" prot="public">NeoN::dsl::Expression</innerclass>
    <innerclass refid="classNeoN_1_1dsl_1_1Operator" prot="public">NeoN::dsl::Operator</innerclass>
    <innerclass refid="classNeoN_1_1dsl_1_1OperatorMixin" prot="public">NeoN::dsl::OperatorMixin</innerclass>
    <innerclass refid="structNeoN_1_1dsl_1_1PostAssemblyBase" prot="public">NeoN::dsl::PostAssemblyBase</innerclass>
    <innerclass refid="classNeoN_1_1dsl_1_1SpatialOperator" prot="public">NeoN::dsl::SpatialOperator</innerclass>
    <innerclass refid="classNeoN_1_1dsl_1_1TemporalOperator" prot="public">NeoN::dsl::TemporalOperator</innerclass>
    <innernamespace refid="namespaceNeoN_1_1dsl_1_1detail">NeoN::dsl::detail</innernamespace>
    <innernamespace refid="namespaceNeoN_1_1dsl_1_1exp">NeoN::dsl::exp</innernamespace>
    <innernamespace refid="namespaceNeoN_1_1dsl_1_1imp">NeoN::dsl::imp</innernamespace>
    <innernamespace refid="namespaceNeoN_1_1dsl_1_1temporal">NeoN::dsl::temporal</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1a65e72931514ea50f7a85aa2942454cee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1dsl_1_1Coeff" kindref="compound">Coeff</ref></type>
        <definition>Coeff NeoN::dsl::operator*</definition>
        <argsstring>(const Coeff &amp;lhs, const Coeff &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoN::dsl::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1Coeff" kindref="compound">Coeff</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1Coeff" kindref="compound">Coeff</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/coeff.hpp" line="59" column="15" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/coeff.hpp" bodystart="59" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1a00d1322453ebe36185dac060845db358" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; ValueType &gt;</type>
        <definition>Expression&lt; ValueType &gt; NeoN::dsl::operator+</definition>
        <argsstring>(Expression&lt; ValueType &gt; lhs, const Expression&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>NeoN::dsl::operator+</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; ValueType &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" line="209" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" bodystart="209" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1a03a2b36294837ab1965156992fe10ccd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; ValueType &gt;</type>
        <definition>Expression&lt; ValueType &gt; NeoN::dsl::operator+</definition>
        <argsstring>(Expression&lt; ValueType &gt; lhs, const SpatialOperator&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>NeoN::dsl::operator+</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; ValueType &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1SpatialOperator" kindref="compound">SpatialOperator</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" line="217" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" bodystart="217" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1a191f28ba2eb12e6ca3fdc7c25929048f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename leftOperator</type>
          </param>
          <param>
            <type>typename rightOperator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; typename leftOperator::VectorValueType &gt;</type>
        <definition>Expression&lt; typename leftOperator::VectorValueType &gt; NeoN::dsl::operator+</definition>
        <argsstring>(leftOperator lhs, rightOperator rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>NeoN::dsl::operator+</qualifiedname>
        <param>
          <type>leftOperator</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>rightOperator</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" line="225" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" bodystart="225" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1a619c9712731a205faddf7f7b88457909" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; ValueType &gt;</type>
        <definition>Expression&lt; ValueType &gt; NeoN::dsl::operator*</definition>
        <argsstring>(scalar scale, const Expression&lt; ValueType &gt; &amp;es)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoN::dsl::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; ValueType &gt; &amp;</type>
          <declname>es</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" line="235" column="20" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" bodystart="235" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1ac3cf7631c2fa8589c6cafa380621827b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; ValueType &gt;</type>
        <definition>Expression&lt; ValueType &gt; NeoN::dsl::operator-</definition>
        <argsstring>(Expression&lt; ValueType &gt; lhs, const Expression&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>NeoN::dsl::operator-</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; ValueType &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" line="252" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" bodystart="252" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1ac6ecc9a0fd680f9e8504a39a5a0ca629" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; ValueType &gt;</type>
        <definition>Expression&lt; ValueType &gt; NeoN::dsl::operator-</definition>
        <argsstring>(Expression&lt; ValueType &gt; lhs, const SpatialOperator&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>NeoN::dsl::operator-</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; ValueType &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1SpatialOperator" kindref="compound">SpatialOperator</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" line="260" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" bodystart="260" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1a590fbdffc01dc7fad7632c70e36a42a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename leftOperator</type>
          </param>
          <param>
            <type>typename rightOperator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; typename leftOperator::VectorValueType &gt;</type>
        <definition>Expression&lt; typename leftOperator::VectorValueType &gt; NeoN::dsl::operator-</definition>
        <argsstring>(leftOperator lhs, rightOperator rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>NeoN::dsl::operator-</qualifiedname>
        <param>
          <type>leftOperator</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>rightOperator</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" line="268" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/expression.hpp" bodystart="268" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1a8ba06394082cf5961a6c00182cde10fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VectorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structNeoN_1_1la_1_1SolverStats" kindref="compound">la::SolverStats</ref></type>
        <definition>la::SolverStats NeoN::dsl::solve</definition>
        <argsstring>(Expression&lt; typename VectorType::ElementType &gt; &amp;exp, VectorType &amp;solution, scalar t, scalar dt, const Dictionary &amp;fvSchemes, const Dictionary &amp;fvSolution, std::vector&lt; PostAssemblyBase&lt; typename VectorType::ElementType &gt; &gt; p={})</argsstring>
        <name>solve</name>
        <qualifiedname>NeoN::dsl::solve</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1dsl_1_1Expression" kindref="compound">Expression</ref>&lt; typename VectorType::ElementType &gt; &amp;</type>
          <declname>exp</declname>
        </param>
        <param>
          <type>VectorType &amp;</type>
          <declname>solution</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> &amp;</type>
          <declname>fvSchemes</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> &amp;</type>
          <declname>fvSolution</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structNeoN_1_1dsl_1_1PostAssemblyBase" kindref="compound">PostAssemblyBase</ref>&lt; typename VectorType::ElementType &gt; &gt;</type>
          <declname>p</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/solver.hpp" line="74" column="17" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/solver.hpp" bodystart="74" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1a45b8dbfdb03a75f2198ec9fc1146d424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1dsl_1_1SpatialOperator" kindref="compound">SpatialOperator</ref>&lt; ValueType &gt;</type>
        <definition>SpatialOperator&lt; ValueType &gt; NeoN::dsl::operator*</definition>
        <argsstring>(scalar scalarCoeff, SpatialOperator&lt; ValueType &gt; rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoN::dsl::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
          <declname>scalarCoeff</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1dsl_1_1SpatialOperator" kindref="compound">SpatialOperator</ref>&lt; ValueType &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/spatialOperator.hpp" line="188" column="17" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/spatialOperator.hpp" bodystart="188" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1acf2ba01e32969b7a4dbdd538697a0463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1dsl_1_1SpatialOperator" kindref="compound">SpatialOperator</ref>&lt; ValueType &gt;</type>
        <definition>SpatialOperator&lt; ValueType &gt; NeoN::dsl::operator*</definition>
        <argsstring>(const Vector&lt; scalar &gt; &amp;coeffVector, SpatialOperator&lt; ValueType &gt; rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoN::dsl::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>coeffVector</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1dsl_1_1SpatialOperator" kindref="compound">SpatialOperator</ref>&lt; ValueType &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/spatialOperator.hpp" line="197" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/spatialOperator.hpp" bodystart="197" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1a186ad4adcdaffe64f7f2823eb47a20cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1dsl_1_1SpatialOperator" kindref="compound">SpatialOperator</ref>&lt; ValueType &gt;</type>
        <definition>SpatialOperator&lt; ValueType &gt; NeoN::dsl::operator*</definition>
        <argsstring>(const Coeff &amp;coeff, SpatialOperator&lt; ValueType &gt; rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoN::dsl::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1Coeff" kindref="compound">Coeff</ref> &amp;</type>
          <declname>coeff</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1dsl_1_1SpatialOperator" kindref="compound">SpatialOperator</ref>&lt; ValueType &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/spatialOperator.hpp" line="205" column="17" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/spatialOperator.hpp" bodystart="205" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1a291279f06860abfaecfdc4e837e431ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1dsl_1_1TemporalOperator" kindref="compound">TemporalOperator</ref>&lt; ValueType &gt;</type>
        <definition>TemporalOperator&lt; ValueType &gt; NeoN::dsl::operator*</definition>
        <argsstring>(scalar scalarCoeff, TemporalOperator&lt; ValueType &gt; rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoN::dsl::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
          <declname>scalarCoeff</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1dsl_1_1TemporalOperator" kindref="compound">TemporalOperator</ref>&lt; ValueType &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/temporalOperator.hpp" line="192" column="18" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/temporalOperator.hpp" bodystart="192" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1ac81d2705320737cd7cf1b3d02f26a8f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1dsl_1_1TemporalOperator" kindref="compound">TemporalOperator</ref>&lt; ValueType &gt;</type>
        <definition>TemporalOperator&lt; ValueType &gt; NeoN::dsl::operator*</definition>
        <argsstring>(const Vector&lt; scalar &gt; &amp;coeffVector, TemporalOperator&lt; ValueType &gt; rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoN::dsl::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>coeffVector</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1dsl_1_1TemporalOperator" kindref="compound">TemporalOperator</ref>&lt; ValueType &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/temporalOperator.hpp" line="201" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/temporalOperator.hpp" bodystart="201" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1_1dsl_1ade8c9773cf5acb55f56387c0fd32036a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1dsl_1_1TemporalOperator" kindref="compound">TemporalOperator</ref>&lt; ValueType &gt;</type>
        <definition>TemporalOperator&lt; ValueType &gt; NeoN::dsl::operator*</definition>
        <argsstring>(const Coeff &amp;coeff, TemporalOperator&lt; ValueType &gt; rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoN::dsl::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1dsl_1_1Coeff" kindref="compound">Coeff</ref> &amp;</type>
          <declname>coeff</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1dsl_1_1TemporalOperator" kindref="compound">TemporalOperator</ref>&lt; ValueType &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/temporalOperator.hpp" line="209" column="18" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/temporalOperator.hpp" bodystart="209" bodyend="214"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoN/NeoN/include/NeoN/dsl/coeff.hpp" line="10" column="1"/>
  </compounddef>
</doxygen>
