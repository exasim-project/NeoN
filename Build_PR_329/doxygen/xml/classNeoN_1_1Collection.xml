<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classNeoN_1_1Collection" kind="class" language="C++" prot="public">
    <compoundname>NeoN::Collection</compoundname>
    <includes refid="collection_8hpp" local="no">collection.hpp</includes>
    <innerclass refid="structNeoN_1_1Collection_1_1CollectionConcept" prot="private">NeoN::Collection::CollectionConcept</innerclass>
    <innerclass refid="structNeoN_1_1Collection_1_1CollectionModel" prot="private">NeoN::Collection::CollectionModel</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoN_1_1Collection_1a0357151607fcca345b6f9fb861b7da18" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; CollectionConcept &gt;</type>
        <definition>std::unique_ptr&lt;CollectionConcept&gt; NeoN::Collection::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <qualifiedname>NeoN::Collection::impl_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="204" column="21" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="204" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoN_1_1Collection_1ac4b2fd67ecebc86c39c7dd0b39ac4b9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CollectionType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>NeoN::Collection::Collection</definition>
        <argsstring>(CollectionType collection)</argsstring>
        <name>Collection</name>
        <qualifiedname>NeoN::Collection::Collection</qualifiedname>
        <param>
          <type>CollectionType</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="classNeoN_1_1Collection" kindref="compound">Collection</ref> from a specific collection type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CollectionType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the collection to be wrapped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>collection</parametername>
</parameternamelist>
<parameterdescription>
<para>The collection instance to be wrapped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="39" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1a97d6c90cf88b648760de843962fce67c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoN::Collection::Collection</definition>
        <argsstring>(const Collection &amp;other)=delete</argsstring>
        <name>Collection</name>
        <qualifiedname>NeoN::Collection::Collection</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Collection" kindref="compound">Collection</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>A <ref refid="classNeoN_1_1Collection" kindref="compound">Collection</ref> is not copyable, only moveable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="46" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1ad77870df9b9dcd1e75a8e0ba5a81bbd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Collection" kindref="compound">Collection</ref> &amp;</type>
        <definition>Collection &amp; NeoN::Collection::operator=</definition>
        <argsstring>(const Collection &amp;other)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>NeoN::Collection::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Collection" kindref="compound">Collection</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>A <ref refid="classNeoN_1_1Collection" kindref="compound">Collection</ref> is not copyable, only moveable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="51" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1ae4ca7a6b4b6e48b426eefbdf6deb0906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoN::Collection::Collection</definition>
        <argsstring>(Collection &amp;&amp;other)=default</argsstring>
        <name>Collection</name>
        <qualifiedname>NeoN::Collection::Collection</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Collection" kindref="compound">Collection</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>A <ref refid="classNeoN_1_1Collection" kindref="compound">Collection</ref> is moveable, but not copyable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="56" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1a795d2870f81e208a2f8fcd9f415542a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Collection" kindref="compound">Collection</ref> &amp;</type>
        <definition>Collection &amp; NeoN::Collection::operator=</definition>
        <argsstring>(Collection &amp;&amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>NeoN::Collection::operator=</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Collection" kindref="compound">Collection</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>A <ref refid="classNeoN_1_1Collection" kindref="compound">Collection</ref> is moveable, but not copyable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="61" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1ac9eabf11bdf9fc7505845c929381b65f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> &amp;</type>
        <definition>Document &amp; NeoN::Collection::doc</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>doc</name>
        <qualifiedname>NeoN::Collection::doc</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Retrieves a document by its ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the document to retrieve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classNeoN_1_1Document" kindref="compound">Document</ref>&amp; A reference to the document. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="69" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1aa5be2cd5b86f159ba2d1961856981573" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> &amp;</type>
        <definition>const Document &amp; NeoN::Collection::doc</definition>
        <argsstring>(const std::string &amp;id) const</argsstring>
        <name>doc</name>
        <qualifiedname>NeoN::Collection::doc</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Retrieves a document by its ID (const version). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the document to retrieve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref>&amp; A const reference to the document. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="77" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1ab66946a42309840d8e96658103b64c88" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; NeoN::Collection::find</definition>
        <argsstring>(const std::function&lt; bool(const Document &amp;)&gt; &amp;predicate) const</argsstring>
        <name>find</name>
        <qualifiedname>NeoN::Collection::find</qualifiedname>
        <param>
          <type>const std::function&lt; bool(const <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> &amp;)&gt; &amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Finds documents that match a given predicate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>A function that takes a <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> and returns true if it matches the criteria. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::string&gt; A vector of document IDs that match the predicate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="86" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1a1a92b5f9966aef8375d839305c4827b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" kindref="member">size_t</ref></type>
        <definition>size_t NeoN::Collection::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>NeoN::Collection::size</qualifiedname>
        <briefdescription>
<para>Returns the number of documents in the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t The number of documents. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="93" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1a783d0c07830d809064e7c9830ee2a640" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string NeoN::Collection::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <qualifiedname>NeoN::Collection::type</qualifiedname>
        <briefdescription>
<para>Returns the type of the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string The type of the collection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="100" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1ade61f7bb517799e8efcbcd7b1682eba1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string NeoN::Collection::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>NeoN::Collection::name</qualifiedname>
        <briefdescription>
<para>Returns the name of the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string The name of the collection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="107" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1ae87c6f19d2450dbb1695cc2689f1b7fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Database" kindref="compound">Database</ref> &amp;</type>
        <definition>Database &amp; NeoN::Collection::db</definition>
        <argsstring>()</argsstring>
        <name>db</name>
        <qualifiedname>NeoN::Collection::db</qualifiedname>
        <briefdescription>
<para>Returns a reference to the database containing the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoN_1_1Database" kindref="compound">Database</ref>&amp; A reference to the database. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="114" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1ad2793842e1f46839561b3d6239a2fef1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classNeoN_1_1Database" kindref="compound">Database</ref> &amp;</type>
        <definition>const Database &amp; NeoN::Collection::db</definition>
        <argsstring>() const</argsstring>
        <name>db</name>
        <qualifiedname>NeoN::Collection::db</qualifiedname>
        <briefdescription>
<para>Returns a const reference to the database containing the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="classNeoN_1_1Database" kindref="compound">Database</ref>&amp; A const reference to the database. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="121" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1a74b792c7a4988b27274a3de3181f545b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CollectionType</type>
          </param>
        </templateparamlist>
        <type>CollectionType &amp;</type>
        <definition>CollectionType &amp; NeoN::Collection::as</definition>
        <argsstring>()</argsstring>
        <name>as</name>
        <qualifiedname>NeoN::Collection::as</qualifiedname>
        <briefdescription>
<para>Casts the collection to a specific collection type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CollectionType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to cast to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CollectionType&amp; A reference to the casted collection. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_cast</parametername>
</parameternamelist>
<parameterdescription>
<para>if the cast fails. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="131" column="20" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="131" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Collection_1a9e4a0ac8530f3a0cfc058ca380591b4b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CollectionType</type>
          </param>
        </templateparamlist>
        <type>const CollectionType &amp;</type>
        <definition>const CollectionType &amp; NeoN::Collection::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <qualifiedname>NeoN::Collection::as</qualifiedname>
        <briefdescription>
<para>Casts the collection to a specific collection type (const version). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CollectionType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to cast to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const CollectionType&amp; A const reference to the casted collection. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_cast</parametername>
</parameternamelist>
<parameterdescription>
<para>if the cast fails. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="150" column="26" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="150" bodyend="158"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A type-erased interface collection types. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classNeoN_1_1Collection" kindref="compound">Collection</ref> class provides a type-erased interface for different collection types. It allows operations such as retrieving documents, finding documents based on predicates, and accessing collection metadata. </para>
    </detaileddescription>
    <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="28" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="29" bodyend="205"/>
    <listofallmembers>
      <member refid="classNeoN_1_1Collection_1a74b792c7a4988b27274a3de3181f545b" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>as</name></member>
      <member refid="classNeoN_1_1Collection_1a9e4a0ac8530f3a0cfc058ca380591b4b" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>as</name></member>
      <member refid="classNeoN_1_1Collection_1ac4b2fd67ecebc86c39c7dd0b39ac4b9c" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>Collection</name></member>
      <member refid="classNeoN_1_1Collection_1a97d6c90cf88b648760de843962fce67c" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>Collection</name></member>
      <member refid="classNeoN_1_1Collection_1ae4ca7a6b4b6e48b426eefbdf6deb0906" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>Collection</name></member>
      <member refid="classNeoN_1_1Collection_1ae87c6f19d2450dbb1695cc2689f1b7fd" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>db</name></member>
      <member refid="classNeoN_1_1Collection_1ad2793842e1f46839561b3d6239a2fef1" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>db</name></member>
      <member refid="classNeoN_1_1Collection_1ac9eabf11bdf9fc7505845c929381b65f" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>doc</name></member>
      <member refid="classNeoN_1_1Collection_1aa5be2cd5b86f159ba2d1961856981573" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>doc</name></member>
      <member refid="classNeoN_1_1Collection_1ab66946a42309840d8e96658103b64c88" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>find</name></member>
      <member refid="classNeoN_1_1Collection_1a0357151607fcca345b6f9fb861b7da18" prot="private" virt="non-virtual"><scope>NeoN::Collection</scope><name>impl_</name></member>
      <member refid="classNeoN_1_1Collection_1ade61f7bb517799e8efcbcd7b1682eba1" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>name</name></member>
      <member refid="classNeoN_1_1Collection_1ad77870df9b9dcd1e75a8e0ba5a81bbd6" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>operator=</name></member>
      <member refid="classNeoN_1_1Collection_1a795d2870f81e208a2f8fcd9f415542a5" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>operator=</name></member>
      <member refid="classNeoN_1_1Collection_1a1a92b5f9966aef8375d839305c4827b9" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>size</name></member>
      <member refid="classNeoN_1_1Collection_1a783d0c07830d809064e7c9830ee2a640" prot="public" virt="non-virtual"><scope>NeoN::Collection</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
