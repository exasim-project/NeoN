<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classNeoN_1_1CollectionMixin" kind="class" language="C++" prot="public">
    <compoundname>NeoN::CollectionMixin</compoundname>
    <includes refid="collection_8hpp" local="no">collection.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename DocumentType</type>
      </param>
    </templateparamlist>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classNeoN_1_1CollectionMixin_1a999afc07d7b24436f26ee1865dbcd6a0" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, DocumentType &gt;</type>
        <definition>std::unordered_map&lt;std::string, DocumentType&gt; NeoN::CollectionMixin&lt; DocumentType &gt;::docs_</definition>
        <argsstring></argsstring>
        <name>docs_</name>
        <qualifiedname>NeoN::CollectionMixin::docs_</qualifiedname>
        <briefdescription>
<para>The map of document IDs to documents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="335" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoN_1_1CollectionMixin_1aa737ea2c96d46037f80d4524f0d843da" prot="protected" static="no" mutable="no">
        <type><ref refid="classNeoN_1_1Database" kindref="compound">NeoN::Database</ref> &amp;</type>
        <definition>NeoN::Database&amp; NeoN::CollectionMixin&lt; DocumentType &gt;::db_</definition>
        <argsstring></argsstring>
        <name>db_</name>
        <qualifiedname>NeoN::CollectionMixin::db_</qualifiedname>
        <briefdescription>
<para>The reference to the database. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="336" column="20" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoN_1_1CollectionMixin_1a019b4a98e1b7c10e7657bf5922a0ca3c" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string NeoN::CollectionMixin&lt; DocumentType &gt;::name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <qualifiedname>NeoN::CollectionMixin::name_</qualifiedname>
        <briefdescription>
<para>The name of the collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="337" column="17" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="337" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1a5c533ffeda2bfb3b0dd6140a9b33933b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::CollectionMixin&lt; DocumentType &gt;::CollectionMixin</definition>
        <argsstring>(NeoN::Database &amp;db, std::string name)</argsstring>
        <name>CollectionMixin</name>
        <qualifiedname>NeoN::CollectionMixin::CollectionMixin</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Database" kindref="compound">NeoN::Database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="classNeoN_1_1CollectionMixin" kindref="compound">CollectionMixin</ref> with the given database and collection name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para>The database reference. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the collection. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="225" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1abaa1804d768e094625d6253d972e0dfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoN::CollectionMixin&lt; DocumentType &gt;::CollectionMixin</definition>
        <argsstring>(const CollectionMixin &amp;)=delete</argsstring>
        <name>CollectionMixin</name>
        <qualifiedname>NeoN::CollectionMixin::CollectionMixin</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1CollectionMixin" kindref="compound">CollectionMixin</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>@biref A <ref refid="classNeoN_1_1CollectionMixin" kindref="compound">CollectionMixin</ref> is not copyable, only moveable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="230" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1ab48c00584d4b9374460a65e25ecc211c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoN_1_1CollectionMixin" kindref="compound">CollectionMixin</ref> &amp;</type>
        <definition>CollectionMixin &amp; NeoN::CollectionMixin&lt; DocumentType &gt;::operator=</definition>
        <argsstring>(const CollectionMixin &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>NeoN::CollectionMixin::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1CollectionMixin" kindref="compound">CollectionMixin</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>@biref A <ref refid="classNeoN_1_1CollectionMixin" kindref="compound">CollectionMixin</ref> is not copyable, only moveable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="235" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1a7c8d6846fe92a5dd9319e877a45c0d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoN::CollectionMixin&lt; DocumentType &gt;::CollectionMixin</definition>
        <argsstring>(CollectionMixin &amp;&amp;)=default</argsstring>
        <name>CollectionMixin</name>
        <qualifiedname>NeoN::CollectionMixin::CollectionMixin</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1CollectionMixin" kindref="compound">CollectionMixin</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>@biref A <ref refid="classNeoN_1_1CollectionMixin" kindref="compound">CollectionMixin</ref> is moveable, but not copyable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="240" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1a019cd00d1007114c97e6c76757822b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoN_1_1CollectionMixin" kindref="compound">CollectionMixin</ref> &amp;</type>
        <definition>CollectionMixin &amp; NeoN::CollectionMixin&lt; DocumentType &gt;::operator=</definition>
        <argsstring>(CollectionMixin &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>NeoN::CollectionMixin::operator=</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1CollectionMixin" kindref="compound">CollectionMixin</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>@biref A <ref refid="classNeoN_1_1CollectionMixin" kindref="compound">CollectionMixin</ref> is not move-assign-able. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="245" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1af3c8806d121577d87af64f7e8bc90270" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> &amp;</type>
        <definition>Document &amp; NeoN::CollectionMixin&lt; DocumentType &gt;::doc</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>doc</name>
        <qualifiedname>NeoN::CollectionMixin::doc</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Retrieves a document by its ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the document. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classNeoN_1_1Document" kindref="compound">Document</ref>&amp; A reference to the document. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="253" column="14" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1a40da7d5e6f9121c4892bc3a7f7feb574" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> &amp;</type>
        <definition>const Document &amp; NeoN::CollectionMixin&lt; DocumentType &gt;::doc</definition>
        <argsstring>(const std::string &amp;id) const</argsstring>
        <name>doc</name>
        <qualifiedname>NeoN::CollectionMixin::doc</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Retrieves a document by its ID (const version). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the document. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref>&amp; A const reference to the document. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="261" column="20" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="261" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1a5d4b588b1edf7fba73f8a2ef77c0cdc1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; NeoN::CollectionMixin&lt; DocumentType &gt;::find</definition>
        <argsstring>(const std::function&lt; bool(const Document &amp;)&gt; &amp;predicate) const</argsstring>
        <name>find</name>
        <qualifiedname>NeoN::CollectionMixin::find</qualifiedname>
        <param>
          <type>const std::function&lt; bool(const <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> &amp;)&gt; &amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Finds documents that match a given predicate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>A function that takes a const reference to a <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> and returns a bool. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::string&gt; A vector of document IDs that match the predicate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="269" column="17" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="269" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1a68e559c60897ba6c5edf6c90ce56bc59" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t NeoN::CollectionMixin&lt; DocumentType &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>NeoN::CollectionMixin::size</qualifiedname>
        <briefdescription>
<para>Gets the number of documents in the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::size_t The number of documents. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="287" column="17" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="287" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1a817c2dc43ae8feac71fc686fb2ba7b13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classNeoN_1_1Database" kindref="compound">NeoN::Database</ref> &amp;</type>
        <definition>const NeoN::Database &amp; NeoN::CollectionMixin&lt; DocumentType &gt;::db</definition>
        <argsstring>() const</argsstring>
        <name>db</name>
        <qualifiedname>NeoN::CollectionMixin::db</qualifiedname>
        <briefdescription>
<para>Gets a const reference to the database. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="classNeoN_1_1Database" kindref="compound">NeoN::Database</ref>&amp; A const reference to the database. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="294" column="26" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1a382c73d467ed7c093f47f4158ef41956" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Database" kindref="compound">NeoN::Database</ref> &amp;</type>
        <definition>NeoN::Database &amp; NeoN::CollectionMixin&lt; DocumentType &gt;::db</definition>
        <argsstring>()</argsstring>
        <name>db</name>
        <qualifiedname>NeoN::CollectionMixin::db</qualifiedname>
        <briefdescription>
<para>Gets a reference to the database. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classNeoN_1_1Database" kindref="compound">NeoN::Database</ref>&amp; A reference to the database. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="301" column="20" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="301" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1a3e11a5752aceb65be85c9b015ccc59af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; NeoN::CollectionMixin&lt; DocumentType &gt;::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>NeoN::CollectionMixin::name</qualifiedname>
        <briefdescription>
<para>Gets the name of the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const std::string&amp; A const reference to the collection name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="308" column="23" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1a996d80b8f25ae166443b99cae12c3497" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string NeoN::CollectionMixin&lt; DocumentType &gt;::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <qualifiedname>NeoN::CollectionMixin::type</qualifiedname>
        <briefdescription>
<para>Gets the type name of the documents in the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string The type name of the documents. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="315" column="17" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1CollectionMixin_1aee4265b72483f00cc9057213b6e930dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; NeoN::CollectionMixin&lt; DocumentType &gt;::sortedKeys</definition>
        <argsstring>() const</argsstring>
        <name>sortedKeys</name>
        <qualifiedname>NeoN::CollectionMixin::sortedKeys</qualifiedname>
        <briefdescription>
<para>Gets the sorted keys of the documents in the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;std::string&gt; A vector of sorted document keys. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="322" column="17" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="322" bodyend="331"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A mixin class for collection of documents in a database to simplify the implementation of common operations. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DocumentType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of documents stored in the collection. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>NeoN::CollectionMixin&lt; DocumentType &gt;</label>
        <link refid="classNeoN_1_1CollectionMixin"/>
        <childnode refid="2" relation="usage">
          <edgelabel>db_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>NeoN::Database</label>
        <link refid="classNeoN_1_1Database"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="214" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" bodystart="215" bodyend="338"/>
    <listofallmembers>
      <member refid="classNeoN_1_1CollectionMixin_1a5c533ffeda2bfb3b0dd6140a9b33933b" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>CollectionMixin</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1abaa1804d768e094625d6253d972e0dfb" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>CollectionMixin</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1a7c8d6846fe92a5dd9319e877a45c0d97" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>CollectionMixin</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1a817c2dc43ae8feac71fc686fb2ba7b13" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>db</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1a382c73d467ed7c093f47f4158ef41956" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>db</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1aa737ea2c96d46037f80d4524f0d843da" prot="protected" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>db_</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1af3c8806d121577d87af64f7e8bc90270" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>doc</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1a40da7d5e6f9121c4892bc3a7f7feb574" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>doc</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1a999afc07d7b24436f26ee1865dbcd6a0" prot="protected" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>docs_</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1a5d4b588b1edf7fba73f8a2ef77c0cdc1" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>find</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1a3e11a5752aceb65be85c9b015ccc59af" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>name</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1a019b4a98e1b7c10e7657bf5922a0ca3c" prot="protected" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>name_</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1ab48c00584d4b9374460a65e25ecc211c" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>operator=</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1a019cd00d1007114c97e6c76757822b7a" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>operator=</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1a68e559c60897ba6c5edf6c90ce56bc59" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>size</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1aee4265b72483f00cc9057213b6e930dc" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>sortedKeys</name></member>
      <member refid="classNeoN_1_1CollectionMixin_1a996d80b8f25ae166443b99cae12c3497" prot="public" virt="non-virtual"><scope>NeoN::CollectionMixin</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
