<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structNeoN_1_1SumKernel" kind="struct" language="C++" prot="public">
    <compoundname>NeoN::SumKernel</compoundname>
    <includes refid="sum_8hpp" local="no">sum.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structNeoN_1_1SumKernel_1a7166bc9a556587f874265e3421a5dc91" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::SumKernel::operator()</definition>
        <argsstring>(const GPUExecutor &amp;exec, const Vector&lt; T &gt; &amp;field, T &amp;sum) const</argsstring>
        <name>operator()</name>
        <qualifiedname>NeoN::SumKernel::operator()</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1GPUExecutor" kindref="compound">GPUExecutor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>sum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/operations/sum.hpp" line="14" column="10" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/operations/sum.hpp" bodystart="14" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="structNeoN_1_1SumKernel_1afd7d7b8cb1a93e6f958850bf72a9c051" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::SumKernel::operator()</definition>
        <argsstring>(const CPUExecutor &amp;exec, const Vector&lt; T &gt; &amp;field, T &amp;sum)</argsstring>
        <name>operator()</name>
        <qualifiedname>NeoN::SumKernel::operator()</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1CPUExecutor" kindref="compound">CPUExecutor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>sum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/operations/sum.hpp" line="28" column="10" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/operations/sum.hpp" bodystart="28" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="structNeoN_1_1SumKernel_1a1e7f7dbc532edef6fad2b97883de3632" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::SumKernel::operator()</definition>
        <argsstring>(const SerialExecutor &amp;exec, const Vector&lt; T &gt; &amp;field, T &amp;sum)</argsstring>
        <name>operator()</name>
        <qualifiedname>NeoN::SumKernel::operator()</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1SerialExecutor" kindref="compound">SerialExecutor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>sum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/operations/sum.hpp" line="42" column="10" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/operations/sum.hpp" bodystart="42" bodyend="53"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/operations/sum.hpp" line="11" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/operations/sum.hpp" bodystart="12" bodyend="54"/>
    <listofallmembers>
      <member refid="structNeoN_1_1SumKernel_1a7166bc9a556587f874265e3421a5dc91" prot="public" virt="non-virtual"><scope>NeoN::SumKernel</scope><name>operator()</name></member>
      <member refid="structNeoN_1_1SumKernel_1afd7d7b8cb1a93e6f958850bf72a9c051" prot="public" virt="non-virtual"><scope>NeoN::SumKernel</scope><name>operator()</name></member>
      <member refid="structNeoN_1_1SumKernel_1a1e7f7dbc532edef6fad2b97883de3632" prot="public" virt="non-virtual"><scope>NeoN::SumKernel</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
