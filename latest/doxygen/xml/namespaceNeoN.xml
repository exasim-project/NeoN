<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceNeoN" kind="namespace" language="C++">
    <compoundname>NeoN</compoundname>
    <innerclass refid="classNeoN_1_1ArgList" prot="public">NeoN::ArgList</innerclass>
    <innerclass refid="classNeoN_1_1BaseClassData" prot="public">NeoN::BaseClassData</innerclass>
    <innerclass refid="classNeoN_1_1BaseClassDocumentation" prot="public">NeoN::BaseClassDocumentation</innerclass>
    <innerclass refid="classNeoN_1_1BoundaryData" prot="public">NeoN::BoundaryData</innerclass>
    <innerclass refid="classNeoN_1_1BoundaryMesh" prot="public">NeoN::BoundaryMesh</innerclass>
    <innerclass refid="classNeoN_1_1Collection" prot="public">NeoN::Collection</innerclass>
    <innerclass refid="classNeoN_1_1CollectionMixin" prot="public">NeoN::CollectionMixin</innerclass>
    <innerclass refid="classNeoN_1_1CPUExecutor" prot="public">NeoN::CPUExecutor</innerclass>
    <innerclass refid="classNeoN_1_1Database" prot="public">NeoN::Database</innerclass>
    <innerclass refid="classNeoN_1_1DerivedClassDocumentation" prot="public">NeoN::DerivedClassDocumentation</innerclass>
    <innerclass refid="classNeoN_1_1Dictionary" prot="public">NeoN::Dictionary</innerclass>
    <innerclass refid="classNeoN_1_1DimensionMismatch" prot="public">NeoN::DimensionMismatch</innerclass>
    <innerclass refid="classNeoN_1_1Document" prot="public">NeoN::Document</innerclass>
    <innerclass refid="classNeoN_1_1Error" prot="public">NeoN::Error</innerclass>
    <innerclass refid="classNeoN_1_1Field" prot="public">NeoN::Field</innerclass>
    <innerclass refid="classNeoN_1_1GPUExecutor" prot="public">NeoN::GPUExecutor</innerclass>
    <innerclass refid="classNeoN_1_1NeoNException" prot="public">NeoN::NeoNException</innerclass>
    <innerclass refid="structNeoN_1_1Parameters" prot="public">NeoN::Parameters</innerclass>
    <innerclass refid="structNeoN_1_1RegisterDocumentation" prot="public">NeoN::RegisterDocumentation</innerclass>
    <innerclass refid="classNeoN_1_1RuntimeSelectionFactory" prot="public">NeoN::RuntimeSelectionFactory</innerclass>
    <innerclass refid="classNeoN_1_1RuntimeSelectionFactory_3_01Base_00_01Parameters_3_01Args_8_8_8_01_4_01_4" prot="public">NeoN::RuntimeSelectionFactory&lt; Base, Parameters&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="classNeoN_1_1SegmentedVector" prot="public">NeoN::SegmentedVector</innerclass>
    <innerclass refid="classNeoN_1_1SegmentedVectorView" prot="public">NeoN::SegmentedVectorView</innerclass>
    <innerclass refid="classNeoN_1_1SerialExecutor" prot="public">NeoN::SerialExecutor</innerclass>
    <innerclass refid="classNeoN_1_1StencilDataBase" prot="public">NeoN::StencilDataBase</innerclass>
    <innerclass refid="structNeoN_1_1SumKernel" prot="public">NeoN::SumKernel</innerclass>
    <innerclass refid="classNeoN_1_1Time" prot="public">NeoN::Time</innerclass>
    <innerclass refid="classNeoN_1_1TokenList" prot="public">NeoN::TokenList</innerclass>
    <innerclass refid="classNeoN_1_1UnstructuredMesh" prot="public">NeoN::UnstructuredMesh</innerclass>
    <innerclass refid="classNeoN_1_1Vec3" prot="public">NeoN::Vec3</innerclass>
    <innerclass refid="classNeoN_1_1Vector" prot="public">NeoN::Vector</innerclass>
    <innerclass refid="classNeoN_1_1View" prot="public">NeoN::View</innerclass>
    <innernamespace refid="namespaceNeoN_1_1detail">NeoN::detail</innernamespace>
    <innernamespace refid="namespaceNeoN_1_1dsl">NeoN::dsl</innernamespace>
    <innernamespace refid="namespaceNeoN_1_1finiteVolume">NeoN::finiteVolume</innernamespace>
    <innernamespace refid="namespaceNeoN_1_1la">NeoN::la</innernamespace>
    <innernamespace refid="namespaceNeoN_1_1sundials">NeoN::sundials</innernamespace>
    <innernamespace refid="namespaceNeoN_1_1timeIntegration">NeoN::timeIntegration</innernamespace>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceNeoN_1a957a55577aca9a487c3965676ad7dd12" prot="public" static="no">
        <type>std::function&lt; bool(<ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref>)&gt;</type>
        <definition>NeoN::DocumentValidator</definition>
        <argsstring></argsstring>
        <name>DocumentValidator</name>
        <qualifiedname>NeoN::DocumentValidator</qualifiedname>
        <briefdescription>
<para>A type alias for a function that validates a <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This type alias represents a function that takes a <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> object as an argument and returns a boolean value indicating whether the <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> is valid or not.</para>
<para>Example usage: <programlisting><codeline><highlight class="normal"><ref refid="namespaceNeoN_1a957a55577aca9a487c3965676ad7dd12" kindref="member">DocumentValidator</ref><sp/>validator<sp/>=<sp/>[](<ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref><sp/>dict)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Validation<sp/>logic<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>or<sp/>false<sp/>based<sp/>on<sp/>validation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/document.hpp" line="30" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/document.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" prot="public" static="no">
        <type>std::variant&lt; <ref refid="classNeoN_1_1SerialExecutor" kindref="compound">SerialExecutor</ref>, <ref refid="classNeoN_1_1CPUExecutor" kindref="compound">CPUExecutor</ref>, <ref refid="classNeoN_1_1GPUExecutor" kindref="compound">GPUExecutor</ref> &gt;</type>
        <definition>using NeoN::Executor = typedef std::variant&lt;SerialExecutor, CPUExecutor, GPUExecutor&gt;</definition>
        <argsstring></argsstring>
        <name>Executor</name>
        <qualifiedname>NeoN::Executor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/executor/executor.hpp" line="16" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/executor/executor.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoN_1a0f89cac0ba212d1026c9fedc65742cea" prot="public" static="no">
        <type>std::variant&lt; <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref>, <ref refid="classNeoN_1_1TokenList" kindref="compound">TokenList</ref> &gt;</type>
        <definition>using NeoN::Input = typedef std::variant&lt;Dictionary, TokenList&gt;</definition>
        <argsstring></argsstring>
        <name>Input</name>
        <qualifiedname>NeoN::Input</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/input.hpp" line="13" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/input.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoN_1afa6c1c30776d4f6ed4691b0f9d1ea416" prot="public" static="no">
        <type>int32_t</type>
        <definition>using NeoN::label = typedef int32_t</definition>
        <argsstring></argsstring>
        <name>label</name>
        <qualifiedname>NeoN::label</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" line="24" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" prot="public" static="no">
        <type>int32_t</type>
        <definition>using NeoN::localIdx = typedef int32_t</definition>
        <argsstring></argsstring>
        <name>localIdx</name>
        <qualifiedname>NeoN::localIdx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" line="30" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoN_1a3d469b59cc4421a3428d23982c361682" prot="public" static="no">
        <type>int64_t</type>
        <definition>using NeoN::globalIdx = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>globalIdx</name>
        <qualifiedname>NeoN::globalIdx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" line="31" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoN_1a5ea7bf3a45fbcf9c6ee454474ab13c06" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using NeoN::size_t = typedef std::size_t</definition>
        <argsstring></argsstring>
        <name>size_t</name>
        <qualifiedname>NeoN::size_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" line="36" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoN_1ada9015c3a9ac7ba20f5abde4670ca373" prot="public" static="no">
        <type>int</type>
        <definition>using NeoN::mpi_label_t = typedef int</definition>
        <argsstring></argsstring>
        <name>mpi_label_t</name>
        <qualifiedname>NeoN::mpi_label_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" line="37" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" prot="public" static="no">
        <type>float</type>
        <definition>typedef float NeoN::scalar</definition>
        <argsstring></argsstring>
        <name>scalar</name>
        <qualifiedname>NeoN::scalar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/scalar.hpp" line="14" column="15" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/scalar.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoN_1aadf4f765cda112e86b4db29b68434d5e" prot="public" static="no">
        <type>std::string</type>
        <definition>using NeoN::word = typedef std::string</definition>
        <argsstring></argsstring>
        <name>word</name>
        <qualifiedname>NeoN::word</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/time.hpp" line="15" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/time.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoN_1a6389e1f6465846887d6bc01ec8ea818d" prot="public" static="no">
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">NeoN::Vector</ref>&lt; <ref refid="namespaceNeoN_1afa6c1c30776d4f6ed4691b0f9d1ea416" kindref="member">label</ref> &gt;</type>
        <definition>using NeoN::labelVector = typedef NeoN::Vector&lt;label&gt;</definition>
        <argsstring></argsstring>
        <name>labelVector</name>
        <qualifiedname>NeoN::labelVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldTypeDefs.hpp" line="13" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldTypeDefs.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoN_1a345d64e8263d03609fc24b88fed965be" prot="public" static="no">
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">NeoN::Vector</ref>&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
        <definition>using NeoN::localIdxVector = typedef NeoN::Vector&lt;localIdx&gt;</definition>
        <argsstring></argsstring>
        <name>localIdxVector</name>
        <qualifiedname>NeoN::localIdxVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldTypeDefs.hpp" line="14" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldTypeDefs.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoN_1ad4b93cc6d70df72f518f4b16fb19810f" prot="public" static="no">
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">NeoN::Vector</ref>&lt; <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &gt;</type>
        <definition>using NeoN::scalarVector = typedef NeoN::Vector&lt;scalar&gt;</definition>
        <argsstring></argsstring>
        <name>scalarVector</name>
        <qualifiedname>NeoN::scalarVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldTypeDefs.hpp" line="15" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldTypeDefs.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNeoN_1a7184bc8b77652609bed6594f06b728e7" prot="public" static="no">
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">NeoN::Vector</ref>&lt; <ref refid="classNeoN_1_1Vec3" kindref="compound">Vec3</ref> &gt;</type>
        <definition>using NeoN::vectorVector = typedef NeoN::Vector&lt;Vec3&gt;</definition>
        <argsstring></argsstring>
        <name>vectorVector</name>
        <qualifiedname>NeoN::vectorVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldTypeDefs.hpp" line="16" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldTypeDefs.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceNeoN_1aa2d88a1b21583ca5c103bd0c416947d0" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
        <definition>constexpr scalar NeoN::ROOTVSMALL</definition>
        <argsstring></argsstring>
        <name>ROOTVSMALL</name>
        <qualifiedname>NeoN::ROOTVSMALL</qualifiedname>
        <initializer>= 1e-18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/scalar.hpp" line="17" column="18" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/scalar.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceNeoN_1a1cdf9da8729a96756e0784e572829977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::validateRegistration</definition>
        <argsstring>(const Type &amp;field, const std::string &amp;errorMessage)</argsstring>
        <name>validateRegistration</name>
        <qualifiedname>NeoN::validateRegistration</qualifiedname>
        <param>
          <type>const Type &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>errorMessage</declname>
        </param>
        <briefdescription>
<para>Validates that a field is registered in the database. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to validate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errorMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>The error message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the field is not registered in the database. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/database.hpp" line="120" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/database.hpp" bodystart="120" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a1515bc3e21ebafd40f42151ea50ed85b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoN::hasId</definition>
        <argsstring>(Dictionary doc)</argsstring>
        <name>hasId</name>
        <qualifiedname>NeoN::hasId</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref></type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>Checks if a <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> object has an &quot;id&quot; key. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks if the given <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> object has an &quot;id&quot; key.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> object to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> has an &quot;id&quot; key, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/document.hpp" line="40" column="6" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/document.hpp" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1aa67294511d0c7da987259a7b1a3ba59d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; NeoN::name</definition>
        <argsstring>(const NeoN::Document &amp;doc)</argsstring>
        <name>name</name>
        <qualifiedname>NeoN::name</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Document" kindref="compound">NeoN::Document</ref> &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>Retrieves the name of a <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the name of the <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> by looking up the &quot;name&quot; key in the <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref>&apos;s <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> to retrieve the name from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The name of the <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/document.hpp" line="109" column="19" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/document.hpp" declline="109" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a508e5c2b8bf931a8a0921707f98b19e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string &amp; NeoN::name</definition>
        <argsstring>(NeoN::Document &amp;doc)</argsstring>
        <name>name</name>
        <qualifiedname>NeoN::name</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Document" kindref="compound">NeoN::Document</ref> &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>Retrieves the name of a <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the name of the <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> by looking up the &quot;name&quot; key in the <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref>&apos;s <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref> to retrieve the name from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The name of the <ref refid="classNeoN_1_1Document" kindref="compound">Document</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/document.hpp" line="120" column="13" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/document.hpp" declline="120" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a6ad7f4df2e8cf0dacc1c7262cc93f9e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string NeoN::demangle</definition>
        <argsstring>(const char *mangledName)</argsstring>
        <name>demangle</name>
        <qualifiedname>NeoN::demangle</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>mangledName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/demangle.hpp" line="16" column="13" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/demangle.hpp" declline="16" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1af36e4b5b8ea30fdc52a7f31cff8136d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename Key</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::logBadAnyCast</definition>
        <argsstring>(const std::bad_any_cast &amp;e, const Key &amp;key, const Container &amp;data)</argsstring>
        <name>logBadAnyCast</name>
        <qualifiedname>NeoN::logBadAnyCast</qualifiedname>
        <param>
          <type>const std::bad_any_cast &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const Key &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/demangle.hpp" line="19" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/demangle.hpp" bodystart="19" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1ae6c3ff7eb69df45b568b04b852294339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::logOutRange</definition>
        <argsstring>(const std::out_of_range &amp;e, const std::string &amp;key, const std::unordered_map&lt; std::string, std::any &gt; &amp;data)</argsstring>
        <name>logOutRange</name>
        <qualifiedname>NeoN::logOutRange</qualifiedname>
        <param>
          <type>const std::out_of_range &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; std::string, std::any &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/dictionary.hpp" line="15" column="6" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/dictionary.hpp" declline="15" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a217f8ac0be9056e594e2eb1bfd7caae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; NeoN::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Dictionary &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>NeoN::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Dictionary" kindref="compound">Dictionary</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/dictionary.hpp" line="174" column="1" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/dictionary.hpp" declline="174" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1ac649c09e3045b009af8c9a60459e823b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoN::operator==</definition>
        <argsstring>(const Executor &amp;lhs, const Executor &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>NeoN::operator==</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Checks if two executors are equal, i.e. they are of the same type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first executor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second executor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the executors are equal, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/executor/executor.hpp" line="24" column="14" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/executor/executor.hpp" bodystart="24" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1acac5cd47c1ca0f8520e0938d101cb3b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoN::operator!=</definition>
        <argsstring>(const Executor &amp;lhs, const Executor &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>NeoN::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Checks if two executors are not equal, i.e. they are not of the same type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first executor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second executor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the executors not are equal, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/executor/executor.hpp" line="51" column="14" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/executor/executor.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1ae925f6aa90689fd77bdefea5cc28a5ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DataClass</type>
          </param>
        </templateparamlist>
        <type>DataClass</type>
        <definition>DataClass NeoN::read</definition>
        <argsstring>(Input input)</argsstring>
        <name>read</name>
        <qualifiedname>NeoN::read</qualifiedname>
        <param>
          <type><ref refid="namespaceNeoN_1a0f89cac0ba212d1026c9fedc65742cea" kindref="member">Input</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/input.hpp" line="16" column="11" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/input.hpp" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a21e64530776182407f0f068c289adf81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>parallelForKernel</type>
            <declname>Kernel</declname>
            <defname>Kernel</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::parallelFor</definition>
        <argsstring>(const Executor &amp;exec, std::pair&lt; localIdx, localIdx &gt; range, Kernel kernel, std::string name=&quot;parallelFor&quot;)</argsstring>
        <name>parallelFor</name>
        <qualifiedname>NeoN::parallelFor</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;parallelFor&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" line="28" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" bodystart="28" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a44f27717687a4b73cc58ec9918530f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>parallelForKernel</type>
            <declname>Kernel</declname>
            <defname>Kernel</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::parallelFor</definition>
        <argsstring>(const NeoN::Executor &amp;exec, std::pair&lt; localIdx, localIdx &gt; range, Kernel kernel, std::string name=&quot;parallelFor&quot;)</argsstring>
        <name>parallelFor</name>
        <qualifiedname>NeoN::parallelFor</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">NeoN::Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;parallelFor&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" line="56" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" bodystart="56" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a8102905ff0f590304600227d4fb072bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>parallelForVectorKernel&lt; ValueType &gt;</type>
            <declname>Kernel</declname>
            <defname>Kernel</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::parallelFor</definition>
        <argsstring>(const Executor &amp;exec, Vector&lt; ValueType &gt; &amp;field, Kernel kernel, std::string name=&quot;parallelFor&quot;)</argsstring>
        <name>parallelFor</name>
        <qualifiedname>NeoN::parallelFor</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;parallelFor&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" line="75" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" bodystart="75" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a8df765eb52ac2f842d3a7ff423638e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>parallelForVectorKernel&lt; ValueType &gt;</type>
            <declname>Kernel</declname>
            <defname>Kernel</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::parallelFor</definition>
        <argsstring>(Vector&lt; ValueType &gt; &amp;field, Kernel kernel, std::string name=&quot;parallelFor&quot;)</argsstring>
        <name>parallelFor</name>
        <qualifiedname>NeoN::parallelFor</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;parallelFor&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" line="103" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a9d445616a96928bbb015212516721784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::parallelReduce</definition>
        <argsstring>(const Executor &amp;exec, std::pair&lt; localIdx, localIdx &gt; range, Kernel kernel, T &amp;value)</argsstring>
        <name>parallelReduce</name>
        <qualifiedname>NeoN::parallelReduce</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" line="109" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" bodystart="109" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a7be1049e5e1b173afb267a3c66c7d132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::parallelReduce</definition>
        <argsstring>(const NeoN::Executor &amp;exec, std::pair&lt; localIdx, localIdx &gt; range, Kernel kernel, T &amp;value)</argsstring>
        <name>parallelReduce</name>
        <qualifiedname>NeoN::parallelReduce</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">NeoN::Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" line="141" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" bodystart="141" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a425ab45b88f0d024ce81d53a540fd1f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::parallelReduce</definition>
        <argsstring>(const Executor &amp;exec, Vector&lt; ValueType &gt; &amp;field, Kernel kernel, T &amp;value)</argsstring>
        <name>parallelReduce</name>
        <qualifiedname>NeoN::parallelReduce</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" line="150" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" bodystart="150" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a88707492aa026bae5c6bac61496d1b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::parallelReduce</definition>
        <argsstring>(Vector&lt; ValueType &gt; &amp;field, Kernel kernel, T &amp;value)</argsstring>
        <name>parallelReduce</name>
        <qualifiedname>NeoN::parallelReduce</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" line="179" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1ade792a6b242e4bbe2d8882be6928a75a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>typename Kernel</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::parallelScan</definition>
        <argsstring>(const Executor &amp;exec, std::pair&lt; localIdx, localIdx &gt; range, Kernel kernel)</argsstring>
        <name>parallelScan</name>
        <qualifiedname>NeoN::parallelScan</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" line="185" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" bodystart="185" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1af3f4fc3e259ff1c54f7dc82f0e2c766e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::parallelScan</definition>
        <argsstring>(const NeoN::Executor &amp;exec, std::pair&lt; localIdx, localIdx &gt; range, Kernel kernel)</argsstring>
        <name>parallelScan</name>
        <qualifiedname>NeoN::parallelScan</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">NeoN::Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" line="195" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a80b8166e26177cccf8a7e906631c3cea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor</type>
          </param>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename ReturnType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::parallelScan</definition>
        <argsstring>(const Executor &amp;exec, std::pair&lt; localIdx, localIdx &gt; range, Kernel kernel, ReturnType &amp;returnValue)</argsstring>
        <name>parallelScan</name>
        <qualifiedname>NeoN::parallelScan</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>ReturnType &amp;</type>
          <declname>returnValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" line="201" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" bodystart="201" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1ae066b98b683f3a7bd61c9a45a9de942f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Kernel</type>
          </param>
          <param>
            <type>typename ReturnType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::parallelScan</definition>
        <argsstring>(const NeoN::Executor &amp;exec, std::pair&lt; localIdx, localIdx &gt; range, Kernel kernel, ReturnType &amp;returnValue)</argsstring>
        <name>parallelScan</name>
        <qualifiedname>NeoN::parallelScan</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">NeoN::Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Kernel</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>ReturnType &amp;</type>
          <declname>returnValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" line="216" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/parallelAlgorithms.hpp" bodystart="216" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a699a3202658d2a9175e5d3e30e1837b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION localIdx NeoN::one&lt; localIdx &gt;</definition>
        <argsstring>()</argsstring>
        <name>one&lt; localIdx &gt;</name>
        <qualifiedname>NeoN::one&lt; localIdx &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" line="41" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a985399b3ba9d36ea30ffba2bf8524e62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION localIdx NeoN::zero&lt; localIdx &gt;</definition>
        <argsstring>()</argsstring>
        <name>zero&lt; localIdx &gt;</name>
        <qualifiedname>NeoN::zero&lt; localIdx &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" line="47" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/label.hpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a5a92d3d1550bcfb32325f9f4112a5626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION scalar NeoN::mag</definition>
        <argsstring>(const scalar &amp;s)</argsstring>
        <name>mag</name>
        <qualifiedname>NeoN::mag</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/scalar.hpp" line="20" column="8" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/scalar.hpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a1592e9faca78ef0d226965d8e42d4868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION scalar NeoN::one&lt; scalar &gt;</definition>
        <argsstring>()</argsstring>
        <name>one&lt; scalar &gt;</name>
        <qualifiedname>NeoN::one&lt; scalar &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/scalar.hpp" line="24" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/scalar.hpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1aa4eeb8f2fe783ee706a28d1eb29df79e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION scalar NeoN::zero&lt; scalar &gt;</definition>
        <argsstring>()</argsstring>
        <name>zero&lt; scalar &gt;</name>
        <qualifiedname>NeoN::zero&lt; scalar &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/scalar.hpp" line="30" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/scalar.hpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a7ab23a6da54994291e4c183456fc75d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION T</type>
        <definition>KOKKOS_INLINE_FUNCTION T NeoN::one</definition>
        <argsstring>()</argsstring>
        <name>one</name>
        <qualifiedname>NeoN::one</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/traits.hpp" line="12" column="26" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/traits.hpp" declline="12" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a4beedab28f9499a108fea579a833f101" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION T</type>
        <definition>KOKKOS_INLINE_FUNCTION T NeoN::zero</definition>
        <argsstring>()</argsstring>
        <name>zero</name>
        <qualifiedname>NeoN::zero</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/traits.hpp" line="15" column="26" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/traits.hpp" declline="15" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a8482e9b18df5dd944627afdb72291479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="classNeoN_1_1Vec3" kindref="compound">Vec3</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION Vec3 NeoN::operator*</definition>
        <argsstring>(const scalar &amp;sclr, Vec3 rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>NeoN::operator*</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref> &amp;</type>
          <declname>sclr</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1Vec3" kindref="compound">Vec3</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/vec3.hpp" line="149" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/vec3.hpp" bodystart="149" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a16d1972249505eeb9d429169b5528a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION scalar NeoN::operator&amp;</definition>
        <argsstring>(const Vec3 &amp;lhs, Vec3 rhs)</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>NeoN::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1Vec3" kindref="compound">Vec3</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/vec3.hpp" line="156" column="8" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/vec3.hpp" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1ab2e350b466c96eec7683040452e4e9dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION scalar NeoN::mag</definition>
        <argsstring>(const Vec3 &amp;vec)</argsstring>
        <name>mag</name>
        <qualifiedname>NeoN::mag</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/vec3.hpp" line="162" column="8" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/vec3.hpp" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a77a13e9b0fbe3ff7af004f9f98287d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; NeoN::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Vec3 &amp;vec)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>NeoN::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/vec3.hpp" line="164" column="1" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/vec3.hpp" declline="164" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a4dd86f52f22c94a28c8af2fdd0349c7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="classNeoN_1_1Vec3" kindref="compound">Vec3</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION Vec3 NeoN::one&lt; Vec3 &gt;</definition>
        <argsstring>()</argsstring>
        <name>one&lt; Vec3 &gt;</name>
        <qualifiedname>NeoN::one&lt; Vec3 &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/vec3.hpp" line="168" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/vec3.hpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a267bdffd9fa96bfbdd04d99a5102c412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>KOKKOS_INLINE_FUNCTION <ref refid="classNeoN_1_1Vec3" kindref="compound">Vec3</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION Vec3 NeoN::zero&lt; Vec3 &gt;</definition>
        <argsstring>()</argsstring>
        <name>zero&lt; Vec3 &gt;</name>
        <qualifiedname>NeoN::zero&lt; Vec3 &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/vec3.hpp" line="174" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/primitives/vec3.hpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a32239764f88da7b65079e346a5f3c1f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeoN::logOutRange</definition>
        <argsstring>(const std::out_of_range &amp;e, const std::size_t &amp;key, const std::vector&lt; std::any &gt; &amp;data)</argsstring>
        <name>logOutRange</name>
        <qualifiedname>NeoN::logOutRange</qualifiedname>
        <param>
          <type>const std::out_of_range &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const std::size_t &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::any &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" line="14" column="6" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/tokenList.hpp" declline="14" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a57562cfd536bb7f25eadb9c63a8beb0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; NeoN::operator+</definition>
        <argsstring>(Vector&lt; T &gt; lhs, const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>NeoN::operator+</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic add operator, addition of two fields. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to add with this field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to add with this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the addition. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/vector.hpp" line="460" column="9" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/vector.hpp" bodystart="460" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a6581a4919ffb395348a7b6865bab9a58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; NeoN::operator-</definition>
        <argsstring>(Vector&lt; T &gt; lhs, const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>NeoN::operator-</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic subtraction operator, subtraction one field from another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/vector.hpp" line="473" column="9" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/vector.hpp" bodystart="473" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1af9198d29681d27f9a478aa99c01c00b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto NeoN::views</definition>
        <argsstring>(Types &amp;... args)</argsstring>
        <name>views</name>
        <qualifiedname>NeoN::views</qualifiedname>
        <param>
          <type>Types &amp;...</type>
          <declname>args</declname>
        </param>
    <requiresclause>(hasView&lt;std::remove_reference_t&lt;Types&gt;&gt; &amp;&amp; ...)    </requiresclause>
        <briefdescription>
<para>Unpacks all views of the passed classes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Types</parametername>
</parameternamelist>
<parameterdescription>
<para>Types of the classes with views </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple containing the unpacked views (use structured bindings). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/view.hpp" line="105" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/core/view.hpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a1e99c20b9a299c1d6f875551c13a965c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Inner</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::map</definition>
        <argsstring>(Vector&lt; T &gt; &amp;a, const Inner inner, std::pair&lt; localIdx, localIdx &gt; range={0, 0})</argsstring>
        <name>map</name>
        <qualifiedname>NeoN::map</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Inner</type>
          <declname>inner</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
          <defval>{0, 0}</defval>
        </param>
        <briefdescription>
<para>Map a field using a specific executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inner</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply to each element of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to map the field in. If not provided, the whole field is mapped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" line="29" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" bodystart="29" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a4df3c8c32ed2bdaa77d100c44de4b3eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::fill</definition>
        <argsstring>(Vector&lt; ValueType &gt; &amp;a, const std::type_identity_t&lt; ValueType &gt; value, std::pair&lt; localIdx, localIdx &gt; range={0, 0})</argsstring>
        <name>fill</name>
        <qualifiedname>NeoN::fill</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::type_identity_t&lt; ValueType &gt;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
          <defval>{0, 0}</defval>
        </param>
        <briefdescription>
<para>Fill the field with a scalar value using a specific executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to fill the field with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to fill the field in. If not provided, the whole field is filled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" line="50" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" bodystart="50" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1abea1b0b84403cd0569cc9847703410eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::setVector</definition>
        <argsstring>(Vector&lt; ValueType &gt; &amp;a, const View&lt; const std::type_identity_t&lt; ValueType &gt; &gt; b, std::pair&lt; localIdx, localIdx &gt; range={0, 0})</argsstring>
        <name>setVector</name>
        <qualifiedname>NeoN::setVector</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; const std::type_identity_t&lt; ValueType &gt; &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref>, <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>range</declname>
          <defval>{0, 0}</defval>
        </param>
        <briefdescription>
<para>Set the field with a view of values using a specific executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The view of values to set the field with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to set the field in. If not provided, the whole field is set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" line="76" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" bodystart="76" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1aee59456450b9b342cca7740de8e7132f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::scalarMul</definition>
        <argsstring>(Vector&lt; ValueType &gt; &amp;a, const scalar value)</argsstring>
        <name>scalarMul</name>
        <qualifiedname>NeoN::scalarMul</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceNeoN_1a93c8d00d3aa9fc6f9271c4c0b4f0da97" kindref="member">scalar</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" line="94" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" bodystart="94" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a490d5b5f574236c480c0afd38a2dc1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::add</definition>
        <argsstring>(Vector&lt; ValueType &gt; &amp;a, const Vector&lt; std::type_identity_t&lt; ValueType &gt; &gt; &amp;b)</argsstring>
        <name>add</name>
        <qualifiedname>NeoN::add</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; std::type_identity_t&lt; ValueType &gt; &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" line="119" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" bodystart="119" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1ae281a72f3e7f22c3b2993eac666d4bb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::sub</definition>
        <argsstring>(Vector&lt; ValueType &gt; &amp;a, const Vector&lt; std::type_identity_t&lt; ValueType &gt; &gt; &amp;b)</argsstring>
        <name>sub</name>
        <qualifiedname>NeoN::sub</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; std::type_identity_t&lt; ValueType &gt; &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" line="128" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" bodystart="128" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a4803cc249d78abb5840c8cd26a45adb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoN::mul</definition>
        <argsstring>(Vector&lt; ValueType &gt; &amp;a, const Vector&lt; std::type_identity_t&lt; ValueType &gt; &gt; &amp;b)</argsstring>
        <name>mul</name>
        <qualifiedname>NeoN::mul</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; std::type_identity_t&lt; ValueType &gt; &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" line="136" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" bodystart="136" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1ac949366e652ae588596bb3cc4554a50a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto NeoN::copyToHosts</definition>
        <argsstring>(Args &amp;... fields)</argsstring>
        <name>copyToHosts</name>
        <qualifiedname>NeoN::copyToHosts</qualifiedname>
        <param>
          <type>Args &amp;...</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" line="144" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a1460e2d7fd723c5b4866ef1f5c590f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool NeoN::equal</definition>
        <argsstring>(Vector&lt; T &gt; &amp;field, T value)</argsstring>
        <name>equal</name>
        <qualifiedname>NeoN::equal</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" line="150" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" bodystart="150" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a5c3fac3c94422c5a171789e10c32d6cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool NeoN::equal</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;field, const Vector&lt; T &gt; &amp;field2)</argsstring>
        <name>equal</name>
        <qualifiedname>NeoN::equal</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>field2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" line="165" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" bodystart="165" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a3f4ba8d26e82b678978a8698d06dc003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool NeoN::equal</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;field, View&lt; T &gt; view2)</argsstring>
        <name>equal</name>
        <qualifiedname>NeoN::equal</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1View" kindref="compound">View</ref>&lt; T &gt;</type>
          <declname>view2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" line="187" column="6" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/fieldFreeFunctions.hpp" bodystart="187" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a6ae1b9a7ec028b25e69bbbe4f3f32753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
        </templateparamlist>
        <type>IndexType</type>
        <definition>IndexType NeoN::segmentsFromIntervals</definition>
        <argsstring>(const Vector&lt; IndexType &gt; &amp;intervals, Vector&lt; IndexType &gt; &amp;offsets)</argsstring>
        <name>segmentsFromIntervals</name>
        <qualifiedname>NeoN::segmentsFromIntervals</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; IndexType &gt; &amp;</type>
          <declname>intervals</declname>
        </param>
        <param>
          <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; IndexType &gt; &amp;</type>
          <declname>offsets</declname>
        </param>
        <briefdescription>
<para>Compute segment offsets from an input field corresponding to lengths by computing a prefix sum. </para>
        </briefdescription>
        <detaileddescription>
<para>The offsets are computed by a prefix sum of the input values. So, with given input of {1, 2, 3, 4, 5} the offsets are {0, 1, 3, 6, 10, 15}. Note that the length of offView must be length of intervals + 1 and are all elements of offVIew are required to be zero</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>The values to compute the offsets from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to store the resulting offsets in. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/segmentedVector.hpp" line="25" column="11" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/segmentedVector.hpp" bodystart="25" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a8e4ff733c9dc00a516d09fbdacb127f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoN_1_1UnstructuredMesh" kindref="compound">UnstructuredMesh</ref></type>
        <definition>UnstructuredMesh NeoN::createSingleCellMesh</definition>
        <argsstring>(const Executor exec)</argsstring>
        <name>createSingleCellMesh</name>
        <qualifiedname>NeoN::createSingleCellMesh</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref></type>
          <declname>exec</declname>
        </param>
        <briefdescription>
<para>creates a mesh containing only a single cell @warn currently this is only a 2D mesh </para>
        </briefdescription>
        <detaileddescription>
<para>a 2D mesh in 3D space with left, right, top, bottom boundary faces with the centre at (0.5, 0.5, 0.0) left, top, right, bottom faces and four boundaries one left, right, top, bottom </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/mesh/unstructured/unstructuredMesh.hpp" line="280" column="18" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/mesh/unstructured/unstructuredMesh.hpp" declline="280" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNeoN_1a68aef096b241e8512e81ffb579a55030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoN_1_1UnstructuredMesh" kindref="compound">UnstructuredMesh</ref></type>
        <definition>UnstructuredMesh NeoN::create1DUniformMesh</definition>
        <argsstring>(const Executor exec, const localIdx nCells)</argsstring>
        <name>create1DUniformMesh</name>
        <qualifiedname>NeoN::create1DUniformMesh</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref></type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
          <declname>nCells</declname>
        </param>
        <briefdescription>
<para>A factory function for a 1D mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>A 1D mesh in 3D space in which each cell has a left and a right face. The 1D mesh is aligned with the x coordinate of Cartesian coordinate system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/mesh/unstructured/unstructuredMesh.hpp" line="287" column="18" declfile="/home/runner/work/NeoN/NeoN/include/NeoN/mesh/unstructured/unstructuredMesh.hpp" declline="287" declcolumn="18"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoN/NeoN/include/NeoN/core/database/collection.hpp" line="13" column="1"/>
  </compounddef>
</doxygen>
