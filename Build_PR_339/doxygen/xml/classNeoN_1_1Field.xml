<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classNeoN_1_1Field" kind="class" language="C++" prot="public">
    <compoundname>NeoN::Field</compoundname>
    <includes refid="field_8hpp" local="no">field.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename ValueType</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoN_1_1Field_1a7863bef11a1897a71be6e4215674a1c4" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref></type>
        <definition>Executor NeoN::Field&lt; ValueType &gt;::exec_</definition>
        <argsstring></argsstring>
        <name>exec_</name>
        <qualifiedname>NeoN::Field::exec_</qualifiedname>
        <briefdescription>
<para>The executor on which the field is stored. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="105" column="14" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoN_1_1Field_1a58075eba844e4df6dce09ee695635bf5" prot="private" static="no" mutable="no">
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt;</type>
        <definition>Vector&lt;ValueType&gt; NeoN::Field&lt; ValueType &gt;::internalVector_</definition>
        <argsstring></argsstring>
        <name>internalVector_</name>
        <qualifiedname>NeoN::Field::internalVector_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="106" column="12" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoN_1_1Field_1a5a2bef1cead5ef452858c3b277fc8188" prot="private" static="no" mutable="no">
        <type><ref refid="classNeoN_1_1BoundaryData" kindref="compound">BoundaryData</ref>&lt; ValueType &gt;</type>
        <definition>BoundaryData&lt;ValueType&gt; NeoN::Field&lt; ValueType &gt;::boundaryData_</definition>
        <argsstring></argsstring>
        <name>boundaryData_</name>
        <qualifiedname>NeoN::Field::boundaryData_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="107" column="18" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoN_1_1Field_1a3bb608304e07a85682d20ee28e1abc5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="37" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="37" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1ace248ecfc5b7ae374937d4e5da0bf018" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, localIdx nCells, const std::vector&lt; localIdx &gt; &amp;offsets)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
          <declname>nCells</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt; &amp;</type>
          <declname>offsets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="40" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a858ccf9a420f5496813b957ec342124e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, const Vector&lt; ValueType &gt; &amp;internalVector, const BoundaryData&lt; ValueType &gt; &amp;boundaryData)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>internalVector</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1BoundaryData" kindref="compound">BoundaryData</ref>&lt; ValueType &gt; &amp;</type>
          <declname>boundaryData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="44" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="44" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a96bb6d7affd958ddb90c8b5b9e577c39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, const Vector&lt; ValueType &gt; &amp;internalVector, std::vector&lt; localIdx &gt; offsets)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>internalVector</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref> &gt;</type>
          <declname>offsets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="52" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="52" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a0113dddf913944387408d119b5209d94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, localIdx internalSize, localIdx boundarySize)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
          <declname>internalSize</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoN_1a40785cd3c378b425dd30ae7f4d7dcabc" kindref="member">localIdx</ref></type>
          <declname>boundarySize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="58" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1aa6c497ad1df119d4790c1f8c9fb1ce1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="63" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a29847474e9fe0767f33ab1176d524eed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoN::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;&amp;rhs)</argsstring>
        <name>Field</name>
        <qualifiedname>NeoN::Field::Field</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="68" column="5" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a5b89bacad43bbcac66c75a7583beb745" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Field&lt; ValueType &gt; &amp; NeoN::Field&lt; ValueType &gt;::operator=</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>NeoN::Field::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="74" column="11" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a1a744d8fce154f90f6310dac8f19db5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Field&lt; ValueType &gt; &amp; NeoN::Field&lt; ValueType &gt;::operator=</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;&amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>NeoN::Field::operator=</qualifiedname>
        <param>
          <type><ref refid="classNeoN_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="82" column="11" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="82" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1ae32413ec190aa482b0cc96fb4a391b5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
        <definition>const Vector&lt; ValueType &gt; &amp; NeoN::Field&lt; ValueType &gt;::internalVector</definition>
        <argsstring>() const</argsstring>
        <name>internalVector</name>
        <qualifiedname>NeoN::Field::internalVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="90" column="18" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1af20b0aa1af0c2611fed2417f7e853ea5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1Vector" kindref="compound">Vector</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Vector&lt; ValueType &gt; &amp; NeoN::Field&lt; ValueType &gt;::internalVector</definition>
        <argsstring>()</argsstring>
        <name>internalVector</name>
        <qualifiedname>NeoN::Field::internalVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="93" column="12" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1a8c00a2ea0c20ced11a5c88d803fbe01c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classNeoN_1_1BoundaryData" kindref="compound">BoundaryData</ref>&lt; ValueType &gt; &amp;</type>
        <definition>const BoundaryData&lt; ValueType &gt; &amp; NeoN::Field&lt; ValueType &gt;::boundaryData</definition>
        <argsstring>() const</argsstring>
        <name>boundaryData</name>
        <qualifiedname>NeoN::Field::boundaryData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="96" column="24" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1aff6f0cb23f293015b67e32a5c386c10d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoN_1_1BoundaryData" kindref="compound">BoundaryData</ref>&lt; ValueType &gt; &amp;</type>
        <definition>BoundaryData&lt; ValueType &gt; &amp; NeoN::Field&lt; ValueType &gt;::boundaryData</definition>
        <argsstring>()</argsstring>
        <name>boundaryData</name>
        <qualifiedname>NeoN::Field::boundaryData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="99" column="18" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classNeoN_1_1Field_1abd0575e5cec90d4f66844df33f5dfd90" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceNeoN_1a84c514269c3ade9cf4103acb1210a65f" kindref="member">Executor</ref> &amp;</type>
        <definition>const Executor &amp; NeoN::Field&lt; ValueType &gt;::exec</definition>
        <argsstring>() const</argsstring>
        <name>exec</name>
        <qualifiedname>NeoN::Field::exec</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="101" column="20" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Represents the domain fields for a computational domain. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classNeoN_1_1Field" kindref="compound">Field</ref> class stores the internal fields and boundary information for a computational domain. It provides access to the computed values, reference values, value fractions, reference gradients, boundary types, offsets, and the number of boundaries and boundary faces.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the underlying field values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" line="33" column="1" bodyfile="/home/runner/work/NeoN/NeoN/include/NeoN/fields/field.hpp" bodystart="34" bodyend="108"/>
    <listofallmembers>
      <member refid="classNeoN_1_1Field_1a8c00a2ea0c20ced11a5c88d803fbe01c" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>boundaryData</name></member>
      <member refid="classNeoN_1_1Field_1aff6f0cb23f293015b67e32a5c386c10d" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>boundaryData</name></member>
      <member refid="classNeoN_1_1Field_1a5a2bef1cead5ef452858c3b277fc8188" prot="private" virt="non-virtual"><scope>NeoN::Field</scope><name>boundaryData_</name></member>
      <member refid="classNeoN_1_1Field_1abd0575e5cec90d4f66844df33f5dfd90" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>exec</name></member>
      <member refid="classNeoN_1_1Field_1a7863bef11a1897a71be6e4215674a1c4" prot="private" virt="non-virtual"><scope>NeoN::Field</scope><name>exec_</name></member>
      <member refid="classNeoN_1_1Field_1a3bb608304e07a85682d20ee28e1abc5e" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1ace248ecfc5b7ae374937d4e5da0bf018" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1a858ccf9a420f5496813b957ec342124e" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1a96bb6d7affd958ddb90c8b5b9e577c39" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1a0113dddf913944387408d119b5209d94" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1aa6c497ad1df119d4790c1f8c9fb1ce1a" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1a29847474e9fe0767f33ab1176d524eed" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>Field</name></member>
      <member refid="classNeoN_1_1Field_1ae32413ec190aa482b0cc96fb4a391b5e" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>internalVector</name></member>
      <member refid="classNeoN_1_1Field_1af20b0aa1af0c2611fed2417f7e853ea5" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>internalVector</name></member>
      <member refid="classNeoN_1_1Field_1a58075eba844e4df6dce09ee695635bf5" prot="private" virt="non-virtual"><scope>NeoN::Field</scope><name>internalVector_</name></member>
      <member refid="classNeoN_1_1Field_1a5b89bacad43bbcac66c75a7583beb745" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>operator=</name></member>
      <member refid="classNeoN_1_1Field_1a1a744d8fce154f90f6310dac8f19db5a" prot="public" virt="non-virtual"><scope>NeoN::Field</scope><name>operator=</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
